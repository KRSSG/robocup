// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: messages_robocup_ssl_geometry.proto

#ifndef PROTOBUF_messages_5frobocup_5fssl_5fgeometry_2eproto__INCLUDED
#define PROTOBUF_messages_5frobocup_5fssl_5fgeometry_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3001000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3001000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
class SSL_GeometryCameraCalibration;
class SSL_GeometryCameraCalibrationDefaultTypeInternal;
extern SSL_GeometryCameraCalibrationDefaultTypeInternal _SSL_GeometryCameraCalibration_default_instance_;
class SSL_GeometryData;
class SSL_GeometryDataDefaultTypeInternal;
extern SSL_GeometryDataDefaultTypeInternal _SSL_GeometryData_default_instance_;
class SSL_GeometryFieldSize;
class SSL_GeometryFieldSizeDefaultTypeInternal;
extern SSL_GeometryFieldSizeDefaultTypeInternal _SSL_GeometryFieldSize_default_instance_;

// Internal implementation detail -- do not call these.
void protobuf_AddDesc_messages_5frobocup_5fssl_5fgeometry_2eproto();
void protobuf_InitDefaults_messages_5frobocup_5fssl_5fgeometry_2eproto();

// ===================================================================

class SSL_GeometryFieldSize : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:SSL_GeometryFieldSize) */ {
 public:
  SSL_GeometryFieldSize();
  virtual ~SSL_GeometryFieldSize();

  SSL_GeometryFieldSize(const SSL_GeometryFieldSize& from);

  inline SSL_GeometryFieldSize& operator=(const SSL_GeometryFieldSize& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const SSL_GeometryFieldSize& default_instance();

  static inline const SSL_GeometryFieldSize* internal_default_instance() {
    return reinterpret_cast<const SSL_GeometryFieldSize*>(
               &_SSL_GeometryFieldSize_default_instance_);
  }

  void Swap(SSL_GeometryFieldSize* other);

  // implements Message ----------------------------------------------

  inline SSL_GeometryFieldSize* New() const PROTOBUF_FINAL { return New(NULL); }

  SSL_GeometryFieldSize* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const SSL_GeometryFieldSize& from);
  void MergeFrom(const SSL_GeometryFieldSize& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output)
      const PROTOBUF_FINAL {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(SSL_GeometryFieldSize* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 line_width = 1;
  bool has_line_width() const;
  void clear_line_width();
  static const int kLineWidthFieldNumber = 1;
  ::google::protobuf::int32 line_width() const;
  void set_line_width(::google::protobuf::int32 value);

  // required int32 field_length = 2;
  bool has_field_length() const;
  void clear_field_length();
  static const int kFieldLengthFieldNumber = 2;
  ::google::protobuf::int32 field_length() const;
  void set_field_length(::google::protobuf::int32 value);

  // required int32 field_width = 3;
  bool has_field_width() const;
  void clear_field_width();
  static const int kFieldWidthFieldNumber = 3;
  ::google::protobuf::int32 field_width() const;
  void set_field_width(::google::protobuf::int32 value);

  // required int32 boundary_width = 4;
  bool has_boundary_width() const;
  void clear_boundary_width();
  static const int kBoundaryWidthFieldNumber = 4;
  ::google::protobuf::int32 boundary_width() const;
  void set_boundary_width(::google::protobuf::int32 value);

  // required int32 referee_width = 5;
  bool has_referee_width() const;
  void clear_referee_width();
  static const int kRefereeWidthFieldNumber = 5;
  ::google::protobuf::int32 referee_width() const;
  void set_referee_width(::google::protobuf::int32 value);

  // required int32 goal_width = 6;
  bool has_goal_width() const;
  void clear_goal_width();
  static const int kGoalWidthFieldNumber = 6;
  ::google::protobuf::int32 goal_width() const;
  void set_goal_width(::google::protobuf::int32 value);

  // required int32 goal_depth = 7;
  bool has_goal_depth() const;
  void clear_goal_depth();
  static const int kGoalDepthFieldNumber = 7;
  ::google::protobuf::int32 goal_depth() const;
  void set_goal_depth(::google::protobuf::int32 value);

  // required int32 goal_wall_width = 8;
  bool has_goal_wall_width() const;
  void clear_goal_wall_width();
  static const int kGoalWallWidthFieldNumber = 8;
  ::google::protobuf::int32 goal_wall_width() const;
  void set_goal_wall_width(::google::protobuf::int32 value);

  // required int32 center_circle_radius = 9;
  bool has_center_circle_radius() const;
  void clear_center_circle_radius();
  static const int kCenterCircleRadiusFieldNumber = 9;
  ::google::protobuf::int32 center_circle_radius() const;
  void set_center_circle_radius(::google::protobuf::int32 value);

  // required int32 defense_radius = 10;
  bool has_defense_radius() const;
  void clear_defense_radius();
  static const int kDefenseRadiusFieldNumber = 10;
  ::google::protobuf::int32 defense_radius() const;
  void set_defense_radius(::google::protobuf::int32 value);

  // required int32 defense_stretch = 11;
  bool has_defense_stretch() const;
  void clear_defense_stretch();
  static const int kDefenseStretchFieldNumber = 11;
  ::google::protobuf::int32 defense_stretch() const;
  void set_defense_stretch(::google::protobuf::int32 value);

  // required int32 free_kick_from_defense_dist = 12;
  bool has_free_kick_from_defense_dist() const;
  void clear_free_kick_from_defense_dist();
  static const int kFreeKickFromDefenseDistFieldNumber = 12;
  ::google::protobuf::int32 free_kick_from_defense_dist() const;
  void set_free_kick_from_defense_dist(::google::protobuf::int32 value);

  // required int32 penalty_spot_from_field_line_dist = 13;
  bool has_penalty_spot_from_field_line_dist() const;
  void clear_penalty_spot_from_field_line_dist();
  static const int kPenaltySpotFromFieldLineDistFieldNumber = 13;
  ::google::protobuf::int32 penalty_spot_from_field_line_dist() const;
  void set_penalty_spot_from_field_line_dist(::google::protobuf::int32 value);

  // required int32 penalty_line_from_spot_dist = 14;
  bool has_penalty_line_from_spot_dist() const;
  void clear_penalty_line_from_spot_dist();
  static const int kPenaltyLineFromSpotDistFieldNumber = 14;
  ::google::protobuf::int32 penalty_line_from_spot_dist() const;
  void set_penalty_line_from_spot_dist(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:SSL_GeometryFieldSize)
 private:
  void set_has_line_width();
  void clear_has_line_width();
  void set_has_field_length();
  void clear_has_field_length();
  void set_has_field_width();
  void clear_has_field_width();
  void set_has_boundary_width();
  void clear_has_boundary_width();
  void set_has_referee_width();
  void clear_has_referee_width();
  void set_has_goal_width();
  void clear_has_goal_width();
  void set_has_goal_depth();
  void clear_has_goal_depth();
  void set_has_goal_wall_width();
  void clear_has_goal_wall_width();
  void set_has_center_circle_radius();
  void clear_has_center_circle_radius();
  void set_has_defense_radius();
  void clear_has_defense_radius();
  void set_has_defense_stretch();
  void clear_has_defense_stretch();
  void set_has_free_kick_from_defense_dist();
  void clear_has_free_kick_from_defense_dist();
  void set_has_penalty_spot_from_field_line_dist();
  void clear_has_penalty_spot_from_field_line_dist();
  void set_has_penalty_line_from_spot_dist();
  void clear_has_penalty_line_from_spot_dist();

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::int32 line_width_;
  ::google::protobuf::int32 field_length_;
  ::google::protobuf::int32 field_width_;
  ::google::protobuf::int32 boundary_width_;
  ::google::protobuf::int32 referee_width_;
  ::google::protobuf::int32 goal_width_;
  ::google::protobuf::int32 goal_depth_;
  ::google::protobuf::int32 goal_wall_width_;
  ::google::protobuf::int32 center_circle_radius_;
  ::google::protobuf::int32 defense_radius_;
  ::google::protobuf::int32 defense_stretch_;
  ::google::protobuf::int32 free_kick_from_defense_dist_;
  ::google::protobuf::int32 penalty_spot_from_field_line_dist_;
  ::google::protobuf::int32 penalty_line_from_spot_dist_;
  friend void  protobuf_InitDefaults_messages_5frobocup_5fssl_5fgeometry_2eproto_impl();
  friend void  protobuf_AddDesc_messages_5frobocup_5fssl_5fgeometry_2eproto_impl();
  friend const ::google::protobuf::uint32* protobuf_Offsets_messages_5frobocup_5fssl_5fgeometry_2eproto();
  friend void protobuf_ShutdownFile_messages_5frobocup_5fssl_5fgeometry_2eproto();

};
// -------------------------------------------------------------------

class SSL_GeometryCameraCalibration : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:SSL_GeometryCameraCalibration) */ {
 public:
  SSL_GeometryCameraCalibration();
  virtual ~SSL_GeometryCameraCalibration();

  SSL_GeometryCameraCalibration(const SSL_GeometryCameraCalibration& from);

  inline SSL_GeometryCameraCalibration& operator=(const SSL_GeometryCameraCalibration& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const SSL_GeometryCameraCalibration& default_instance();

  static inline const SSL_GeometryCameraCalibration* internal_default_instance() {
    return reinterpret_cast<const SSL_GeometryCameraCalibration*>(
               &_SSL_GeometryCameraCalibration_default_instance_);
  }

  void Swap(SSL_GeometryCameraCalibration* other);

  // implements Message ----------------------------------------------

  inline SSL_GeometryCameraCalibration* New() const PROTOBUF_FINAL { return New(NULL); }

  SSL_GeometryCameraCalibration* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const SSL_GeometryCameraCalibration& from);
  void MergeFrom(const SSL_GeometryCameraCalibration& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output)
      const PROTOBUF_FINAL {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(SSL_GeometryCameraCalibration* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint32 camera_id = 1;
  bool has_camera_id() const;
  void clear_camera_id();
  static const int kCameraIdFieldNumber = 1;
  ::google::protobuf::uint32 camera_id() const;
  void set_camera_id(::google::protobuf::uint32 value);

  // required float focal_length = 2;
  bool has_focal_length() const;
  void clear_focal_length();
  static const int kFocalLengthFieldNumber = 2;
  float focal_length() const;
  void set_focal_length(float value);

  // required float principal_point_x = 3;
  bool has_principal_point_x() const;
  void clear_principal_point_x();
  static const int kPrincipalPointXFieldNumber = 3;
  float principal_point_x() const;
  void set_principal_point_x(float value);

  // required float principal_point_y = 4;
  bool has_principal_point_y() const;
  void clear_principal_point_y();
  static const int kPrincipalPointYFieldNumber = 4;
  float principal_point_y() const;
  void set_principal_point_y(float value);

  // required float distortion = 5;
  bool has_distortion() const;
  void clear_distortion();
  static const int kDistortionFieldNumber = 5;
  float distortion() const;
  void set_distortion(float value);

  // required float q0 = 6;
  bool has_q0() const;
  void clear_q0();
  static const int kQ0FieldNumber = 6;
  float q0() const;
  void set_q0(float value);

  // required float q1 = 7;
  bool has_q1() const;
  void clear_q1();
  static const int kQ1FieldNumber = 7;
  float q1() const;
  void set_q1(float value);

  // required float q2 = 8;
  bool has_q2() const;
  void clear_q2();
  static const int kQ2FieldNumber = 8;
  float q2() const;
  void set_q2(float value);

  // required float q3 = 9;
  bool has_q3() const;
  void clear_q3();
  static const int kQ3FieldNumber = 9;
  float q3() const;
  void set_q3(float value);

  // required float tx = 10;
  bool has_tx() const;
  void clear_tx();
  static const int kTxFieldNumber = 10;
  float tx() const;
  void set_tx(float value);

  // required float ty = 11;
  bool has_ty() const;
  void clear_ty();
  static const int kTyFieldNumber = 11;
  float ty() const;
  void set_ty(float value);

  // required float tz = 12;
  bool has_tz() const;
  void clear_tz();
  static const int kTzFieldNumber = 12;
  float tz() const;
  void set_tz(float value);

  // optional float derived_camera_world_tx = 13;
  bool has_derived_camera_world_tx() const;
  void clear_derived_camera_world_tx();
  static const int kDerivedCameraWorldTxFieldNumber = 13;
  float derived_camera_world_tx() const;
  void set_derived_camera_world_tx(float value);

  // optional float derived_camera_world_ty = 14;
  bool has_derived_camera_world_ty() const;
  void clear_derived_camera_world_ty();
  static const int kDerivedCameraWorldTyFieldNumber = 14;
  float derived_camera_world_ty() const;
  void set_derived_camera_world_ty(float value);

  // optional float derived_camera_world_tz = 15;
  bool has_derived_camera_world_tz() const;
  void clear_derived_camera_world_tz();
  static const int kDerivedCameraWorldTzFieldNumber = 15;
  float derived_camera_world_tz() const;
  void set_derived_camera_world_tz(float value);

  // @@protoc_insertion_point(class_scope:SSL_GeometryCameraCalibration)
 private:
  void set_has_camera_id();
  void clear_has_camera_id();
  void set_has_focal_length();
  void clear_has_focal_length();
  void set_has_principal_point_x();
  void clear_has_principal_point_x();
  void set_has_principal_point_y();
  void clear_has_principal_point_y();
  void set_has_distortion();
  void clear_has_distortion();
  void set_has_q0();
  void clear_has_q0();
  void set_has_q1();
  void clear_has_q1();
  void set_has_q2();
  void clear_has_q2();
  void set_has_q3();
  void clear_has_q3();
  void set_has_tx();
  void clear_has_tx();
  void set_has_ty();
  void clear_has_ty();
  void set_has_tz();
  void clear_has_tz();
  void set_has_derived_camera_world_tx();
  void clear_has_derived_camera_world_tx();
  void set_has_derived_camera_world_ty();
  void clear_has_derived_camera_world_ty();
  void set_has_derived_camera_world_tz();
  void clear_has_derived_camera_world_tz();

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::uint32 camera_id_;
  float focal_length_;
  float principal_point_x_;
  float principal_point_y_;
  float distortion_;
  float q0_;
  float q1_;
  float q2_;
  float q3_;
  float tx_;
  float ty_;
  float tz_;
  float derived_camera_world_tx_;
  float derived_camera_world_ty_;
  float derived_camera_world_tz_;
  friend void  protobuf_InitDefaults_messages_5frobocup_5fssl_5fgeometry_2eproto_impl();
  friend void  protobuf_AddDesc_messages_5frobocup_5fssl_5fgeometry_2eproto_impl();
  friend const ::google::protobuf::uint32* protobuf_Offsets_messages_5frobocup_5fssl_5fgeometry_2eproto();
  friend void protobuf_ShutdownFile_messages_5frobocup_5fssl_5fgeometry_2eproto();

};
// -------------------------------------------------------------------

class SSL_GeometryData : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:SSL_GeometryData) */ {
 public:
  SSL_GeometryData();
  virtual ~SSL_GeometryData();

  SSL_GeometryData(const SSL_GeometryData& from);

  inline SSL_GeometryData& operator=(const SSL_GeometryData& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const SSL_GeometryData& default_instance();

  static inline const SSL_GeometryData* internal_default_instance() {
    return reinterpret_cast<const SSL_GeometryData*>(
               &_SSL_GeometryData_default_instance_);
  }

  void Swap(SSL_GeometryData* other);

  // implements Message ----------------------------------------------

  inline SSL_GeometryData* New() const PROTOBUF_FINAL { return New(NULL); }

  SSL_GeometryData* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const SSL_GeometryData& from);
  void MergeFrom(const SSL_GeometryData& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output)
      const PROTOBUF_FINAL {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(SSL_GeometryData* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required .SSL_GeometryFieldSize field = 1;
  bool has_field() const;
  void clear_field();
  static const int kFieldFieldNumber = 1;
  const ::SSL_GeometryFieldSize& field() const;
  ::SSL_GeometryFieldSize* mutable_field();
  ::SSL_GeometryFieldSize* release_field();
  void set_allocated_field(::SSL_GeometryFieldSize* field);

  // repeated .SSL_GeometryCameraCalibration calib = 2;
  int calib_size() const;
  void clear_calib();
  static const int kCalibFieldNumber = 2;
  const ::SSL_GeometryCameraCalibration& calib(int index) const;
  ::SSL_GeometryCameraCalibration* mutable_calib(int index);
  ::SSL_GeometryCameraCalibration* add_calib();
  ::google::protobuf::RepeatedPtrField< ::SSL_GeometryCameraCalibration >*
      mutable_calib();
  const ::google::protobuf::RepeatedPtrField< ::SSL_GeometryCameraCalibration >&
      calib() const;

  // @@protoc_insertion_point(class_scope:SSL_GeometryData)
 private:
  void set_has_field();
  void clear_has_field();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::SSL_GeometryCameraCalibration > calib_;
  ::SSL_GeometryFieldSize* field_;
  friend void  protobuf_InitDefaults_messages_5frobocup_5fssl_5fgeometry_2eproto_impl();
  friend void  protobuf_AddDesc_messages_5frobocup_5fssl_5fgeometry_2eproto_impl();
  friend const ::google::protobuf::uint32* protobuf_Offsets_messages_5frobocup_5fssl_5fgeometry_2eproto();
  friend void protobuf_ShutdownFile_messages_5frobocup_5fssl_5fgeometry_2eproto();

};
// ===================================================================


// ===================================================================

#if !PROTOBUF_INLINE_NOT_IN_HEADERS
// SSL_GeometryFieldSize

// required int32 line_width = 1;
inline bool SSL_GeometryFieldSize::has_line_width() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void SSL_GeometryFieldSize::set_has_line_width() {
  _has_bits_[0] |= 0x00000001u;
}
inline void SSL_GeometryFieldSize::clear_has_line_width() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void SSL_GeometryFieldSize::clear_line_width() {
  line_width_ = 0;
  clear_has_line_width();
}
inline ::google::protobuf::int32 SSL_GeometryFieldSize::line_width() const {
  // @@protoc_insertion_point(field_get:SSL_GeometryFieldSize.line_width)
  return line_width_;
}
inline void SSL_GeometryFieldSize::set_line_width(::google::protobuf::int32 value) {
  set_has_line_width();
  line_width_ = value;
  // @@protoc_insertion_point(field_set:SSL_GeometryFieldSize.line_width)
}

// required int32 field_length = 2;
inline bool SSL_GeometryFieldSize::has_field_length() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void SSL_GeometryFieldSize::set_has_field_length() {
  _has_bits_[0] |= 0x00000002u;
}
inline void SSL_GeometryFieldSize::clear_has_field_length() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void SSL_GeometryFieldSize::clear_field_length() {
  field_length_ = 0;
  clear_has_field_length();
}
inline ::google::protobuf::int32 SSL_GeometryFieldSize::field_length() const {
  // @@protoc_insertion_point(field_get:SSL_GeometryFieldSize.field_length)
  return field_length_;
}
inline void SSL_GeometryFieldSize::set_field_length(::google::protobuf::int32 value) {
  set_has_field_length();
  field_length_ = value;
  // @@protoc_insertion_point(field_set:SSL_GeometryFieldSize.field_length)
}

// required int32 field_width = 3;
inline bool SSL_GeometryFieldSize::has_field_width() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void SSL_GeometryFieldSize::set_has_field_width() {
  _has_bits_[0] |= 0x00000004u;
}
inline void SSL_GeometryFieldSize::clear_has_field_width() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void SSL_GeometryFieldSize::clear_field_width() {
  field_width_ = 0;
  clear_has_field_width();
}
inline ::google::protobuf::int32 SSL_GeometryFieldSize::field_width() const {
  // @@protoc_insertion_point(field_get:SSL_GeometryFieldSize.field_width)
  return field_width_;
}
inline void SSL_GeometryFieldSize::set_field_width(::google::protobuf::int32 value) {
  set_has_field_width();
  field_width_ = value;
  // @@protoc_insertion_point(field_set:SSL_GeometryFieldSize.field_width)
}

// required int32 boundary_width = 4;
inline bool SSL_GeometryFieldSize::has_boundary_width() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void SSL_GeometryFieldSize::set_has_boundary_width() {
  _has_bits_[0] |= 0x00000008u;
}
inline void SSL_GeometryFieldSize::clear_has_boundary_width() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void SSL_GeometryFieldSize::clear_boundary_width() {
  boundary_width_ = 0;
  clear_has_boundary_width();
}
inline ::google::protobuf::int32 SSL_GeometryFieldSize::boundary_width() const {
  // @@protoc_insertion_point(field_get:SSL_GeometryFieldSize.boundary_width)
  return boundary_width_;
}
inline void SSL_GeometryFieldSize::set_boundary_width(::google::protobuf::int32 value) {
  set_has_boundary_width();
  boundary_width_ = value;
  // @@protoc_insertion_point(field_set:SSL_GeometryFieldSize.boundary_width)
}

// required int32 referee_width = 5;
inline bool SSL_GeometryFieldSize::has_referee_width() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void SSL_GeometryFieldSize::set_has_referee_width() {
  _has_bits_[0] |= 0x00000010u;
}
inline void SSL_GeometryFieldSize::clear_has_referee_width() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void SSL_GeometryFieldSize::clear_referee_width() {
  referee_width_ = 0;
  clear_has_referee_width();
}
inline ::google::protobuf::int32 SSL_GeometryFieldSize::referee_width() const {
  // @@protoc_insertion_point(field_get:SSL_GeometryFieldSize.referee_width)
  return referee_width_;
}
inline void SSL_GeometryFieldSize::set_referee_width(::google::protobuf::int32 value) {
  set_has_referee_width();
  referee_width_ = value;
  // @@protoc_insertion_point(field_set:SSL_GeometryFieldSize.referee_width)
}

// required int32 goal_width = 6;
inline bool SSL_GeometryFieldSize::has_goal_width() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void SSL_GeometryFieldSize::set_has_goal_width() {
  _has_bits_[0] |= 0x00000020u;
}
inline void SSL_GeometryFieldSize::clear_has_goal_width() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void SSL_GeometryFieldSize::clear_goal_width() {
  goal_width_ = 0;
  clear_has_goal_width();
}
inline ::google::protobuf::int32 SSL_GeometryFieldSize::goal_width() const {
  // @@protoc_insertion_point(field_get:SSL_GeometryFieldSize.goal_width)
  return goal_width_;
}
inline void SSL_GeometryFieldSize::set_goal_width(::google::protobuf::int32 value) {
  set_has_goal_width();
  goal_width_ = value;
  // @@protoc_insertion_point(field_set:SSL_GeometryFieldSize.goal_width)
}

// required int32 goal_depth = 7;
inline bool SSL_GeometryFieldSize::has_goal_depth() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void SSL_GeometryFieldSize::set_has_goal_depth() {
  _has_bits_[0] |= 0x00000040u;
}
inline void SSL_GeometryFieldSize::clear_has_goal_depth() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void SSL_GeometryFieldSize::clear_goal_depth() {
  goal_depth_ = 0;
  clear_has_goal_depth();
}
inline ::google::protobuf::int32 SSL_GeometryFieldSize::goal_depth() const {
  // @@protoc_insertion_point(field_get:SSL_GeometryFieldSize.goal_depth)
  return goal_depth_;
}
inline void SSL_GeometryFieldSize::set_goal_depth(::google::protobuf::int32 value) {
  set_has_goal_depth();
  goal_depth_ = value;
  // @@protoc_insertion_point(field_set:SSL_GeometryFieldSize.goal_depth)
}

// required int32 goal_wall_width = 8;
inline bool SSL_GeometryFieldSize::has_goal_wall_width() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void SSL_GeometryFieldSize::set_has_goal_wall_width() {
  _has_bits_[0] |= 0x00000080u;
}
inline void SSL_GeometryFieldSize::clear_has_goal_wall_width() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void SSL_GeometryFieldSize::clear_goal_wall_width() {
  goal_wall_width_ = 0;
  clear_has_goal_wall_width();
}
inline ::google::protobuf::int32 SSL_GeometryFieldSize::goal_wall_width() const {
  // @@protoc_insertion_point(field_get:SSL_GeometryFieldSize.goal_wall_width)
  return goal_wall_width_;
}
inline void SSL_GeometryFieldSize::set_goal_wall_width(::google::protobuf::int32 value) {
  set_has_goal_wall_width();
  goal_wall_width_ = value;
  // @@protoc_insertion_point(field_set:SSL_GeometryFieldSize.goal_wall_width)
}

// required int32 center_circle_radius = 9;
inline bool SSL_GeometryFieldSize::has_center_circle_radius() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void SSL_GeometryFieldSize::set_has_center_circle_radius() {
  _has_bits_[0] |= 0x00000100u;
}
inline void SSL_GeometryFieldSize::clear_has_center_circle_radius() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void SSL_GeometryFieldSize::clear_center_circle_radius() {
  center_circle_radius_ = 0;
  clear_has_center_circle_radius();
}
inline ::google::protobuf::int32 SSL_GeometryFieldSize::center_circle_radius() const {
  // @@protoc_insertion_point(field_get:SSL_GeometryFieldSize.center_circle_radius)
  return center_circle_radius_;
}
inline void SSL_GeometryFieldSize::set_center_circle_radius(::google::protobuf::int32 value) {
  set_has_center_circle_radius();
  center_circle_radius_ = value;
  // @@protoc_insertion_point(field_set:SSL_GeometryFieldSize.center_circle_radius)
}

// required int32 defense_radius = 10;
inline bool SSL_GeometryFieldSize::has_defense_radius() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void SSL_GeometryFieldSize::set_has_defense_radius() {
  _has_bits_[0] |= 0x00000200u;
}
inline void SSL_GeometryFieldSize::clear_has_defense_radius() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void SSL_GeometryFieldSize::clear_defense_radius() {
  defense_radius_ = 0;
  clear_has_defense_radius();
}
inline ::google::protobuf::int32 SSL_GeometryFieldSize::defense_radius() const {
  // @@protoc_insertion_point(field_get:SSL_GeometryFieldSize.defense_radius)
  return defense_radius_;
}
inline void SSL_GeometryFieldSize::set_defense_radius(::google::protobuf::int32 value) {
  set_has_defense_radius();
  defense_radius_ = value;
  // @@protoc_insertion_point(field_set:SSL_GeometryFieldSize.defense_radius)
}

// required int32 defense_stretch = 11;
inline bool SSL_GeometryFieldSize::has_defense_stretch() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void SSL_GeometryFieldSize::set_has_defense_stretch() {
  _has_bits_[0] |= 0x00000400u;
}
inline void SSL_GeometryFieldSize::clear_has_defense_stretch() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void SSL_GeometryFieldSize::clear_defense_stretch() {
  defense_stretch_ = 0;
  clear_has_defense_stretch();
}
inline ::google::protobuf::int32 SSL_GeometryFieldSize::defense_stretch() const {
  // @@protoc_insertion_point(field_get:SSL_GeometryFieldSize.defense_stretch)
  return defense_stretch_;
}
inline void SSL_GeometryFieldSize::set_defense_stretch(::google::protobuf::int32 value) {
  set_has_defense_stretch();
  defense_stretch_ = value;
  // @@protoc_insertion_point(field_set:SSL_GeometryFieldSize.defense_stretch)
}

// required int32 free_kick_from_defense_dist = 12;
inline bool SSL_GeometryFieldSize::has_free_kick_from_defense_dist() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void SSL_GeometryFieldSize::set_has_free_kick_from_defense_dist() {
  _has_bits_[0] |= 0x00000800u;
}
inline void SSL_GeometryFieldSize::clear_has_free_kick_from_defense_dist() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void SSL_GeometryFieldSize::clear_free_kick_from_defense_dist() {
  free_kick_from_defense_dist_ = 0;
  clear_has_free_kick_from_defense_dist();
}
inline ::google::protobuf::int32 SSL_GeometryFieldSize::free_kick_from_defense_dist() const {
  // @@protoc_insertion_point(field_get:SSL_GeometryFieldSize.free_kick_from_defense_dist)
  return free_kick_from_defense_dist_;
}
inline void SSL_GeometryFieldSize::set_free_kick_from_defense_dist(::google::protobuf::int32 value) {
  set_has_free_kick_from_defense_dist();
  free_kick_from_defense_dist_ = value;
  // @@protoc_insertion_point(field_set:SSL_GeometryFieldSize.free_kick_from_defense_dist)
}

// required int32 penalty_spot_from_field_line_dist = 13;
inline bool SSL_GeometryFieldSize::has_penalty_spot_from_field_line_dist() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
inline void SSL_GeometryFieldSize::set_has_penalty_spot_from_field_line_dist() {
  _has_bits_[0] |= 0x00001000u;
}
inline void SSL_GeometryFieldSize::clear_has_penalty_spot_from_field_line_dist() {
  _has_bits_[0] &= ~0x00001000u;
}
inline void SSL_GeometryFieldSize::clear_penalty_spot_from_field_line_dist() {
  penalty_spot_from_field_line_dist_ = 0;
  clear_has_penalty_spot_from_field_line_dist();
}
inline ::google::protobuf::int32 SSL_GeometryFieldSize::penalty_spot_from_field_line_dist() const {
  // @@protoc_insertion_point(field_get:SSL_GeometryFieldSize.penalty_spot_from_field_line_dist)
  return penalty_spot_from_field_line_dist_;
}
inline void SSL_GeometryFieldSize::set_penalty_spot_from_field_line_dist(::google::protobuf::int32 value) {
  set_has_penalty_spot_from_field_line_dist();
  penalty_spot_from_field_line_dist_ = value;
  // @@protoc_insertion_point(field_set:SSL_GeometryFieldSize.penalty_spot_from_field_line_dist)
}

// required int32 penalty_line_from_spot_dist = 14;
inline bool SSL_GeometryFieldSize::has_penalty_line_from_spot_dist() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
inline void SSL_GeometryFieldSize::set_has_penalty_line_from_spot_dist() {
  _has_bits_[0] |= 0x00002000u;
}
inline void SSL_GeometryFieldSize::clear_has_penalty_line_from_spot_dist() {
  _has_bits_[0] &= ~0x00002000u;
}
inline void SSL_GeometryFieldSize::clear_penalty_line_from_spot_dist() {
  penalty_line_from_spot_dist_ = 0;
  clear_has_penalty_line_from_spot_dist();
}
inline ::google::protobuf::int32 SSL_GeometryFieldSize::penalty_line_from_spot_dist() const {
  // @@protoc_insertion_point(field_get:SSL_GeometryFieldSize.penalty_line_from_spot_dist)
  return penalty_line_from_spot_dist_;
}
inline void SSL_GeometryFieldSize::set_penalty_line_from_spot_dist(::google::protobuf::int32 value) {
  set_has_penalty_line_from_spot_dist();
  penalty_line_from_spot_dist_ = value;
  // @@protoc_insertion_point(field_set:SSL_GeometryFieldSize.penalty_line_from_spot_dist)
}

// -------------------------------------------------------------------

// SSL_GeometryCameraCalibration

// required uint32 camera_id = 1;
inline bool SSL_GeometryCameraCalibration::has_camera_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void SSL_GeometryCameraCalibration::set_has_camera_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void SSL_GeometryCameraCalibration::clear_has_camera_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void SSL_GeometryCameraCalibration::clear_camera_id() {
  camera_id_ = 0u;
  clear_has_camera_id();
}
inline ::google::protobuf::uint32 SSL_GeometryCameraCalibration::camera_id() const {
  // @@protoc_insertion_point(field_get:SSL_GeometryCameraCalibration.camera_id)
  return camera_id_;
}
inline void SSL_GeometryCameraCalibration::set_camera_id(::google::protobuf::uint32 value) {
  set_has_camera_id();
  camera_id_ = value;
  // @@protoc_insertion_point(field_set:SSL_GeometryCameraCalibration.camera_id)
}

// required float focal_length = 2;
inline bool SSL_GeometryCameraCalibration::has_focal_length() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void SSL_GeometryCameraCalibration::set_has_focal_length() {
  _has_bits_[0] |= 0x00000002u;
}
inline void SSL_GeometryCameraCalibration::clear_has_focal_length() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void SSL_GeometryCameraCalibration::clear_focal_length() {
  focal_length_ = 0;
  clear_has_focal_length();
}
inline float SSL_GeometryCameraCalibration::focal_length() const {
  // @@protoc_insertion_point(field_get:SSL_GeometryCameraCalibration.focal_length)
  return focal_length_;
}
inline void SSL_GeometryCameraCalibration::set_focal_length(float value) {
  set_has_focal_length();
  focal_length_ = value;
  // @@protoc_insertion_point(field_set:SSL_GeometryCameraCalibration.focal_length)
}

// required float principal_point_x = 3;
inline bool SSL_GeometryCameraCalibration::has_principal_point_x() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void SSL_GeometryCameraCalibration::set_has_principal_point_x() {
  _has_bits_[0] |= 0x00000004u;
}
inline void SSL_GeometryCameraCalibration::clear_has_principal_point_x() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void SSL_GeometryCameraCalibration::clear_principal_point_x() {
  principal_point_x_ = 0;
  clear_has_principal_point_x();
}
inline float SSL_GeometryCameraCalibration::principal_point_x() const {
  // @@protoc_insertion_point(field_get:SSL_GeometryCameraCalibration.principal_point_x)
  return principal_point_x_;
}
inline void SSL_GeometryCameraCalibration::set_principal_point_x(float value) {
  set_has_principal_point_x();
  principal_point_x_ = value;
  // @@protoc_insertion_point(field_set:SSL_GeometryCameraCalibration.principal_point_x)
}

// required float principal_point_y = 4;
inline bool SSL_GeometryCameraCalibration::has_principal_point_y() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void SSL_GeometryCameraCalibration::set_has_principal_point_y() {
  _has_bits_[0] |= 0x00000008u;
}
inline void SSL_GeometryCameraCalibration::clear_has_principal_point_y() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void SSL_GeometryCameraCalibration::clear_principal_point_y() {
  principal_point_y_ = 0;
  clear_has_principal_point_y();
}
inline float SSL_GeometryCameraCalibration::principal_point_y() const {
  // @@protoc_insertion_point(field_get:SSL_GeometryCameraCalibration.principal_point_y)
  return principal_point_y_;
}
inline void SSL_GeometryCameraCalibration::set_principal_point_y(float value) {
  set_has_principal_point_y();
  principal_point_y_ = value;
  // @@protoc_insertion_point(field_set:SSL_GeometryCameraCalibration.principal_point_y)
}

// required float distortion = 5;
inline bool SSL_GeometryCameraCalibration::has_distortion() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void SSL_GeometryCameraCalibration::set_has_distortion() {
  _has_bits_[0] |= 0x00000010u;
}
inline void SSL_GeometryCameraCalibration::clear_has_distortion() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void SSL_GeometryCameraCalibration::clear_distortion() {
  distortion_ = 0;
  clear_has_distortion();
}
inline float SSL_GeometryCameraCalibration::distortion() const {
  // @@protoc_insertion_point(field_get:SSL_GeometryCameraCalibration.distortion)
  return distortion_;
}
inline void SSL_GeometryCameraCalibration::set_distortion(float value) {
  set_has_distortion();
  distortion_ = value;
  // @@protoc_insertion_point(field_set:SSL_GeometryCameraCalibration.distortion)
}

// required float q0 = 6;
inline bool SSL_GeometryCameraCalibration::has_q0() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void SSL_GeometryCameraCalibration::set_has_q0() {
  _has_bits_[0] |= 0x00000020u;
}
inline void SSL_GeometryCameraCalibration::clear_has_q0() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void SSL_GeometryCameraCalibration::clear_q0() {
  q0_ = 0;
  clear_has_q0();
}
inline float SSL_GeometryCameraCalibration::q0() const {
  // @@protoc_insertion_point(field_get:SSL_GeometryCameraCalibration.q0)
  return q0_;
}
inline void SSL_GeometryCameraCalibration::set_q0(float value) {
  set_has_q0();
  q0_ = value;
  // @@protoc_insertion_point(field_set:SSL_GeometryCameraCalibration.q0)
}

// required float q1 = 7;
inline bool SSL_GeometryCameraCalibration::has_q1() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void SSL_GeometryCameraCalibration::set_has_q1() {
  _has_bits_[0] |= 0x00000040u;
}
inline void SSL_GeometryCameraCalibration::clear_has_q1() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void SSL_GeometryCameraCalibration::clear_q1() {
  q1_ = 0;
  clear_has_q1();
}
inline float SSL_GeometryCameraCalibration::q1() const {
  // @@protoc_insertion_point(field_get:SSL_GeometryCameraCalibration.q1)
  return q1_;
}
inline void SSL_GeometryCameraCalibration::set_q1(float value) {
  set_has_q1();
  q1_ = value;
  // @@protoc_insertion_point(field_set:SSL_GeometryCameraCalibration.q1)
}

// required float q2 = 8;
inline bool SSL_GeometryCameraCalibration::has_q2() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void SSL_GeometryCameraCalibration::set_has_q2() {
  _has_bits_[0] |= 0x00000080u;
}
inline void SSL_GeometryCameraCalibration::clear_has_q2() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void SSL_GeometryCameraCalibration::clear_q2() {
  q2_ = 0;
  clear_has_q2();
}
inline float SSL_GeometryCameraCalibration::q2() const {
  // @@protoc_insertion_point(field_get:SSL_GeometryCameraCalibration.q2)
  return q2_;
}
inline void SSL_GeometryCameraCalibration::set_q2(float value) {
  set_has_q2();
  q2_ = value;
  // @@protoc_insertion_point(field_set:SSL_GeometryCameraCalibration.q2)
}

// required float q3 = 9;
inline bool SSL_GeometryCameraCalibration::has_q3() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void SSL_GeometryCameraCalibration::set_has_q3() {
  _has_bits_[0] |= 0x00000100u;
}
inline void SSL_GeometryCameraCalibration::clear_has_q3() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void SSL_GeometryCameraCalibration::clear_q3() {
  q3_ = 0;
  clear_has_q3();
}
inline float SSL_GeometryCameraCalibration::q3() const {
  // @@protoc_insertion_point(field_get:SSL_GeometryCameraCalibration.q3)
  return q3_;
}
inline void SSL_GeometryCameraCalibration::set_q3(float value) {
  set_has_q3();
  q3_ = value;
  // @@protoc_insertion_point(field_set:SSL_GeometryCameraCalibration.q3)
}

// required float tx = 10;
inline bool SSL_GeometryCameraCalibration::has_tx() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void SSL_GeometryCameraCalibration::set_has_tx() {
  _has_bits_[0] |= 0x00000200u;
}
inline void SSL_GeometryCameraCalibration::clear_has_tx() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void SSL_GeometryCameraCalibration::clear_tx() {
  tx_ = 0;
  clear_has_tx();
}
inline float SSL_GeometryCameraCalibration::tx() const {
  // @@protoc_insertion_point(field_get:SSL_GeometryCameraCalibration.tx)
  return tx_;
}
inline void SSL_GeometryCameraCalibration::set_tx(float value) {
  set_has_tx();
  tx_ = value;
  // @@protoc_insertion_point(field_set:SSL_GeometryCameraCalibration.tx)
}

// required float ty = 11;
inline bool SSL_GeometryCameraCalibration::has_ty() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void SSL_GeometryCameraCalibration::set_has_ty() {
  _has_bits_[0] |= 0x00000400u;
}
inline void SSL_GeometryCameraCalibration::clear_has_ty() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void SSL_GeometryCameraCalibration::clear_ty() {
  ty_ = 0;
  clear_has_ty();
}
inline float SSL_GeometryCameraCalibration::ty() const {
  // @@protoc_insertion_point(field_get:SSL_GeometryCameraCalibration.ty)
  return ty_;
}
inline void SSL_GeometryCameraCalibration::set_ty(float value) {
  set_has_ty();
  ty_ = value;
  // @@protoc_insertion_point(field_set:SSL_GeometryCameraCalibration.ty)
}

// required float tz = 12;
inline bool SSL_GeometryCameraCalibration::has_tz() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void SSL_GeometryCameraCalibration::set_has_tz() {
  _has_bits_[0] |= 0x00000800u;
}
inline void SSL_GeometryCameraCalibration::clear_has_tz() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void SSL_GeometryCameraCalibration::clear_tz() {
  tz_ = 0;
  clear_has_tz();
}
inline float SSL_GeometryCameraCalibration::tz() const {
  // @@protoc_insertion_point(field_get:SSL_GeometryCameraCalibration.tz)
  return tz_;
}
inline void SSL_GeometryCameraCalibration::set_tz(float value) {
  set_has_tz();
  tz_ = value;
  // @@protoc_insertion_point(field_set:SSL_GeometryCameraCalibration.tz)
}

// optional float derived_camera_world_tx = 13;
inline bool SSL_GeometryCameraCalibration::has_derived_camera_world_tx() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
inline void SSL_GeometryCameraCalibration::set_has_derived_camera_world_tx() {
  _has_bits_[0] |= 0x00001000u;
}
inline void SSL_GeometryCameraCalibration::clear_has_derived_camera_world_tx() {
  _has_bits_[0] &= ~0x00001000u;
}
inline void SSL_GeometryCameraCalibration::clear_derived_camera_world_tx() {
  derived_camera_world_tx_ = 0;
  clear_has_derived_camera_world_tx();
}
inline float SSL_GeometryCameraCalibration::derived_camera_world_tx() const {
  // @@protoc_insertion_point(field_get:SSL_GeometryCameraCalibration.derived_camera_world_tx)
  return derived_camera_world_tx_;
}
inline void SSL_GeometryCameraCalibration::set_derived_camera_world_tx(float value) {
  set_has_derived_camera_world_tx();
  derived_camera_world_tx_ = value;
  // @@protoc_insertion_point(field_set:SSL_GeometryCameraCalibration.derived_camera_world_tx)
}

// optional float derived_camera_world_ty = 14;
inline bool SSL_GeometryCameraCalibration::has_derived_camera_world_ty() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
inline void SSL_GeometryCameraCalibration::set_has_derived_camera_world_ty() {
  _has_bits_[0] |= 0x00002000u;
}
inline void SSL_GeometryCameraCalibration::clear_has_derived_camera_world_ty() {
  _has_bits_[0] &= ~0x00002000u;
}
inline void SSL_GeometryCameraCalibration::clear_derived_camera_world_ty() {
  derived_camera_world_ty_ = 0;
  clear_has_derived_camera_world_ty();
}
inline float SSL_GeometryCameraCalibration::derived_camera_world_ty() const {
  // @@protoc_insertion_point(field_get:SSL_GeometryCameraCalibration.derived_camera_world_ty)
  return derived_camera_world_ty_;
}
inline void SSL_GeometryCameraCalibration::set_derived_camera_world_ty(float value) {
  set_has_derived_camera_world_ty();
  derived_camera_world_ty_ = value;
  // @@protoc_insertion_point(field_set:SSL_GeometryCameraCalibration.derived_camera_world_ty)
}

// optional float derived_camera_world_tz = 15;
inline bool SSL_GeometryCameraCalibration::has_derived_camera_world_tz() const {
  return (_has_bits_[0] & 0x00004000u) != 0;
}
inline void SSL_GeometryCameraCalibration::set_has_derived_camera_world_tz() {
  _has_bits_[0] |= 0x00004000u;
}
inline void SSL_GeometryCameraCalibration::clear_has_derived_camera_world_tz() {
  _has_bits_[0] &= ~0x00004000u;
}
inline void SSL_GeometryCameraCalibration::clear_derived_camera_world_tz() {
  derived_camera_world_tz_ = 0;
  clear_has_derived_camera_world_tz();
}
inline float SSL_GeometryCameraCalibration::derived_camera_world_tz() const {
  // @@protoc_insertion_point(field_get:SSL_GeometryCameraCalibration.derived_camera_world_tz)
  return derived_camera_world_tz_;
}
inline void SSL_GeometryCameraCalibration::set_derived_camera_world_tz(float value) {
  set_has_derived_camera_world_tz();
  derived_camera_world_tz_ = value;
  // @@protoc_insertion_point(field_set:SSL_GeometryCameraCalibration.derived_camera_world_tz)
}

// -------------------------------------------------------------------

// SSL_GeometryData

// required .SSL_GeometryFieldSize field = 1;
inline bool SSL_GeometryData::has_field() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void SSL_GeometryData::set_has_field() {
  _has_bits_[0] |= 0x00000001u;
}
inline void SSL_GeometryData::clear_has_field() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void SSL_GeometryData::clear_field() {
  if (field_ != NULL) field_->::SSL_GeometryFieldSize::Clear();
  clear_has_field();
}
inline const ::SSL_GeometryFieldSize& SSL_GeometryData::field() const {
  // @@protoc_insertion_point(field_get:SSL_GeometryData.field)
  return field_ != NULL ? *field_
                         : *::SSL_GeometryFieldSize::internal_default_instance();
}
inline ::SSL_GeometryFieldSize* SSL_GeometryData::mutable_field() {
  set_has_field();
  if (field_ == NULL) {
    field_ = new ::SSL_GeometryFieldSize;
  }
  // @@protoc_insertion_point(field_mutable:SSL_GeometryData.field)
  return field_;
}
inline ::SSL_GeometryFieldSize* SSL_GeometryData::release_field() {
  // @@protoc_insertion_point(field_release:SSL_GeometryData.field)
  clear_has_field();
  ::SSL_GeometryFieldSize* temp = field_;
  field_ = NULL;
  return temp;
}
inline void SSL_GeometryData::set_allocated_field(::SSL_GeometryFieldSize* field) {
  delete field_;
  field_ = field;
  if (field) {
    set_has_field();
  } else {
    clear_has_field();
  }
  // @@protoc_insertion_point(field_set_allocated:SSL_GeometryData.field)
}

// repeated .SSL_GeometryCameraCalibration calib = 2;
inline int SSL_GeometryData::calib_size() const {
  return calib_.size();
}
inline void SSL_GeometryData::clear_calib() {
  calib_.Clear();
}
inline const ::SSL_GeometryCameraCalibration& SSL_GeometryData::calib(int index) const {
  // @@protoc_insertion_point(field_get:SSL_GeometryData.calib)
  return calib_.Get(index);
}
inline ::SSL_GeometryCameraCalibration* SSL_GeometryData::mutable_calib(int index) {
  // @@protoc_insertion_point(field_mutable:SSL_GeometryData.calib)
  return calib_.Mutable(index);
}
inline ::SSL_GeometryCameraCalibration* SSL_GeometryData::add_calib() {
  // @@protoc_insertion_point(field_add:SSL_GeometryData.calib)
  return calib_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::SSL_GeometryCameraCalibration >*
SSL_GeometryData::mutable_calib() {
  // @@protoc_insertion_point(field_mutable_list:SSL_GeometryData.calib)
  return &calib_;
}
inline const ::google::protobuf::RepeatedPtrField< ::SSL_GeometryCameraCalibration >&
SSL_GeometryData::calib() const {
  // @@protoc_insertion_point(field_list:SSL_GeometryData.calib)
  return calib_;
}

#endif  // !PROTOBUF_INLINE_NOT_IN_HEADERS
// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)


// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_messages_5frobocup_5fssl_5fgeometry_2eproto__INCLUDED
