// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: messages_robocup_ssl_geometry.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "messages_robocup_ssl_geometry.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
class SSL_GeometryFieldSizeDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<SSL_GeometryFieldSize> {};
SSL_GeometryFieldSizeDefaultTypeInternal _SSL_GeometryFieldSize_default_instance_;
class SSL_GeometryCameraCalibrationDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<SSL_GeometryCameraCalibration> {};
SSL_GeometryCameraCalibrationDefaultTypeInternal _SSL_GeometryCameraCalibration_default_instance_;
class SSL_GeometryDataDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<SSL_GeometryData> {};
SSL_GeometryDataDefaultTypeInternal _SSL_GeometryData_default_instance_;

namespace {

::google::protobuf::Metadata file_level_metadata[3];

}  // namespace


const ::google::protobuf::uint32* protobuf_Offsets_messages_5frobocup_5fssl_5fgeometry_2eproto() GOOGLE_ATTRIBUTE_COLD;
const ::google::protobuf::uint32* protobuf_Offsets_messages_5frobocup_5fssl_5fgeometry_2eproto() {
  static const ::google::protobuf::uint32 offsets[] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SSL_GeometryFieldSize, _has_bits_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SSL_GeometryFieldSize, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SSL_GeometryFieldSize, line_width_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SSL_GeometryFieldSize, field_length_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SSL_GeometryFieldSize, field_width_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SSL_GeometryFieldSize, boundary_width_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SSL_GeometryFieldSize, referee_width_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SSL_GeometryFieldSize, goal_width_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SSL_GeometryFieldSize, goal_depth_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SSL_GeometryFieldSize, goal_wall_width_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SSL_GeometryFieldSize, center_circle_radius_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SSL_GeometryFieldSize, defense_radius_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SSL_GeometryFieldSize, defense_stretch_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SSL_GeometryFieldSize, free_kick_from_defense_dist_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SSL_GeometryFieldSize, penalty_spot_from_field_line_dist_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SSL_GeometryFieldSize, penalty_line_from_spot_dist_),
    0,
    1,
    2,
    3,
    4,
    5,
    6,
    7,
    8,
    9,
    10,
    11,
    12,
    13,
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SSL_GeometryCameraCalibration, _has_bits_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SSL_GeometryCameraCalibration, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SSL_GeometryCameraCalibration, camera_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SSL_GeometryCameraCalibration, focal_length_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SSL_GeometryCameraCalibration, principal_point_x_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SSL_GeometryCameraCalibration, principal_point_y_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SSL_GeometryCameraCalibration, distortion_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SSL_GeometryCameraCalibration, q0_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SSL_GeometryCameraCalibration, q1_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SSL_GeometryCameraCalibration, q2_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SSL_GeometryCameraCalibration, q3_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SSL_GeometryCameraCalibration, tx_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SSL_GeometryCameraCalibration, ty_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SSL_GeometryCameraCalibration, tz_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SSL_GeometryCameraCalibration, derived_camera_world_tx_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SSL_GeometryCameraCalibration, derived_camera_world_ty_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SSL_GeometryCameraCalibration, derived_camera_world_tz_),
    0,
    1,
    2,
    3,
    4,
    5,
    6,
    7,
    8,
    9,
    10,
    11,
    12,
    13,
    14,
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SSL_GeometryData, _has_bits_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SSL_GeometryData, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SSL_GeometryData, field_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SSL_GeometryData, calib_),
    0,
    1,
  };
  return offsets;
}

static const ::google::protobuf::internal::MigrationSchema schemas[] = {
  { 0, 18, sizeof(SSL_GeometryFieldSize)},
  { 32, 51, sizeof(SSL_GeometryCameraCalibration)},
  { 66, 72, sizeof(SSL_GeometryData)},
};

static const ::google::protobuf::internal::DefaultInstanceData file_default_instances[] = {
  {reinterpret_cast<const ::google::protobuf::Message*>(&_SSL_GeometryFieldSize_default_instance_), NULL},
  {reinterpret_cast<const ::google::protobuf::Message*>(&_SSL_GeometryCameraCalibration_default_instance_), NULL},
  {reinterpret_cast<const ::google::protobuf::Message*>(&_SSL_GeometryData_default_instance_), NULL},
};

namespace {

void protobuf_AssignDescriptors() {
  protobuf_AddDesc_messages_5frobocup_5fssl_5fgeometry_2eproto();
  ::google::protobuf::MessageFactory* factory = NULL;
  AssignDescriptors(
      "messages_robocup_ssl_geometry.proto", schemas, file_default_instances, protobuf_Offsets_messages_5frobocup_5fssl_5fgeometry_2eproto(), factory,
      file_level_metadata, NULL, NULL);
}

void protobuf_AssignDescriptorsOnce() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &protobuf_AssignDescriptors);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::internal::RegisterAllTypes(file_level_metadata, 3);
}

}  // namespace

void protobuf_ShutdownFile_messages_5frobocup_5fssl_5fgeometry_2eproto() {
  _SSL_GeometryFieldSize_default_instance_.Shutdown();
  delete file_level_metadata[0].reflection;
  _SSL_GeometryCameraCalibration_default_instance_.Shutdown();
  delete file_level_metadata[1].reflection;
  _SSL_GeometryData_default_instance_.Shutdown();
  delete file_level_metadata[2].reflection;
}

void protobuf_InitDefaults_messages_5frobocup_5fssl_5fgeometry_2eproto_impl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::internal::InitProtobufDefaults();
  _SSL_GeometryFieldSize_default_instance_.DefaultConstruct();
  _SSL_GeometryCameraCalibration_default_instance_.DefaultConstruct();
  _SSL_GeometryData_default_instance_.DefaultConstruct();
  _SSL_GeometryData_default_instance_.get_mutable()->field_ = const_cast< ::SSL_GeometryFieldSize*>(
      ::SSL_GeometryFieldSize::internal_default_instance());
}

void protobuf_InitDefaults_messages_5frobocup_5fssl_5fgeometry_2eproto() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &protobuf_InitDefaults_messages_5frobocup_5fssl_5fgeometry_2eproto_impl);
}
void protobuf_AddDesc_messages_5frobocup_5fssl_5fgeometry_2eproto_impl() {
  protobuf_InitDefaults_messages_5frobocup_5fssl_5fgeometry_2eproto();
  static const char descriptor[] = {
      "\n#messages_robocup_ssl_geometry.proto\"\212\003"
      "\n\025SSL_GeometryFieldSize\022\022\n\nline_width\030\001 "
      "\002(\005\022\024\n\014field_length\030\002 \002(\005\022\023\n\013field_width"
      "\030\003 \002(\005\022\026\n\016boundary_width\030\004 \002(\005\022\025\n\rrefere"
      "e_width\030\005 \002(\005\022\022\n\ngoal_width\030\006 \002(\005\022\022\n\ngoa"
      "l_depth\030\007 \002(\005\022\027\n\017goal_wall_width\030\010 \002(\005\022\034"
      "\n\024center_circle_radius\030\t \002(\005\022\026\n\016defense_"
      "radius\030\n \002(\005\022\027\n\017defense_stretch\030\013 \002(\005\022#\n"
      "\033free_kick_from_defense_dist\030\014 \002(\005\022)\n!pe"
      "nalty_spot_from_field_line_dist\030\r \002(\005\022#\n"
      "\033penalty_line_from_spot_dist\030\016 \002(\005\"\311\002\n\035S"
      "SL_GeometryCameraCalibration\022\021\n\tcamera_i"
      "d\030\001 \002(\r\022\024\n\014focal_length\030\002 \002(\002\022\031\n\021princip"
      "al_point_x\030\003 \002(\002\022\031\n\021principal_point_y\030\004 "
      "\002(\002\022\022\n\ndistortion\030\005 \002(\002\022\n\n\002q0\030\006 \002(\002\022\n\n\002q"
      "1\030\007 \002(\002\022\n\n\002q2\030\010 \002(\002\022\n\n\002q3\030\t \002(\002\022\n\n\002tx\030\n "
      "\002(\002\022\n\n\002ty\030\013 \002(\002\022\n\n\002tz\030\014 \002(\002\022\037\n\027derived_c"
      "amera_world_tx\030\r \001(\002\022\037\n\027derived_camera_w"
      "orld_ty\030\016 \001(\002\022\037\n\027derived_camera_world_tz"
      "\030\017 \001(\002\"h\n\020SSL_GeometryData\022%\n\005field\030\001 \002("
      "\0132\026.SSL_GeometryFieldSize\022-\n\005calib\030\002 \003(\013"
      "2\036.SSL_GeometryCameraCalibration"
  };
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
      descriptor, 872);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "messages_robocup_ssl_geometry.proto", &protobuf_RegisterTypes);
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_messages_5frobocup_5fssl_5fgeometry_2eproto);
}

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AddDesc_messages_5frobocup_5fssl_5fgeometry_2eproto_once_);
void protobuf_AddDesc_messages_5frobocup_5fssl_5fgeometry_2eproto() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AddDesc_messages_5frobocup_5fssl_5fgeometry_2eproto_once_,
                 &protobuf_AddDesc_messages_5frobocup_5fssl_5fgeometry_2eproto_impl);
}
// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_messages_5frobocup_5fssl_5fgeometry_2eproto {
  StaticDescriptorInitializer_messages_5frobocup_5fssl_5fgeometry_2eproto() {
    protobuf_AddDesc_messages_5frobocup_5fssl_5fgeometry_2eproto();
  }
} static_descriptor_initializer_messages_5frobocup_5fssl_5fgeometry_2eproto_;

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int SSL_GeometryFieldSize::kLineWidthFieldNumber;
const int SSL_GeometryFieldSize::kFieldLengthFieldNumber;
const int SSL_GeometryFieldSize::kFieldWidthFieldNumber;
const int SSL_GeometryFieldSize::kBoundaryWidthFieldNumber;
const int SSL_GeometryFieldSize::kRefereeWidthFieldNumber;
const int SSL_GeometryFieldSize::kGoalWidthFieldNumber;
const int SSL_GeometryFieldSize::kGoalDepthFieldNumber;
const int SSL_GeometryFieldSize::kGoalWallWidthFieldNumber;
const int SSL_GeometryFieldSize::kCenterCircleRadiusFieldNumber;
const int SSL_GeometryFieldSize::kDefenseRadiusFieldNumber;
const int SSL_GeometryFieldSize::kDefenseStretchFieldNumber;
const int SSL_GeometryFieldSize::kFreeKickFromDefenseDistFieldNumber;
const int SSL_GeometryFieldSize::kPenaltySpotFromFieldLineDistFieldNumber;
const int SSL_GeometryFieldSize::kPenaltyLineFromSpotDistFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SSL_GeometryFieldSize::SSL_GeometryFieldSize()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_InitDefaults_messages_5frobocup_5fssl_5fgeometry_2eproto();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:SSL_GeometryFieldSize)
}
SSL_GeometryFieldSize::SSL_GeometryFieldSize(const SSL_GeometryFieldSize& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&line_width_, &from.line_width_,
    reinterpret_cast<char*>(&penalty_line_from_spot_dist_) -
    reinterpret_cast<char*>(&line_width_) + sizeof(penalty_line_from_spot_dist_));
  // @@protoc_insertion_point(copy_constructor:SSL_GeometryFieldSize)
}

void SSL_GeometryFieldSize::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&line_width_, 0, reinterpret_cast<char*>(&penalty_line_from_spot_dist_) -
    reinterpret_cast<char*>(&line_width_) + sizeof(penalty_line_from_spot_dist_));
}

SSL_GeometryFieldSize::~SSL_GeometryFieldSize() {
  // @@protoc_insertion_point(destructor:SSL_GeometryFieldSize)
  SharedDtor();
}

void SSL_GeometryFieldSize::SharedDtor() {
}

void SSL_GeometryFieldSize::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SSL_GeometryFieldSize::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return file_level_metadata[0].descriptor;
}

const SSL_GeometryFieldSize& SSL_GeometryFieldSize::default_instance() {
  protobuf_InitDefaults_messages_5frobocup_5fssl_5fgeometry_2eproto();
  return *internal_default_instance();
}

SSL_GeometryFieldSize* SSL_GeometryFieldSize::New(::google::protobuf::Arena* arena) const {
  SSL_GeometryFieldSize* n = new SSL_GeometryFieldSize;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void SSL_GeometryFieldSize::Clear() {
// @@protoc_insertion_point(message_clear_start:SSL_GeometryFieldSize)
  if (_has_bits_[0 / 32] & 255u) {
    ::memset(&line_width_, 0, reinterpret_cast<char*>(&goal_wall_width_) -
      reinterpret_cast<char*>(&line_width_) + sizeof(goal_wall_width_));
  }
  if (_has_bits_[8 / 32] & 16128u) {
    ::memset(&center_circle_radius_, 0, reinterpret_cast<char*>(&penalty_line_from_spot_dist_) -
      reinterpret_cast<char*>(&center_circle_radius_) + sizeof(penalty_line_from_spot_dist_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool SSL_GeometryFieldSize::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:SSL_GeometryFieldSize)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 line_width = 1;
      case 1: {
        if (tag == 8u) {
          set_has_line_width();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &line_width_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required int32 field_length = 2;
      case 2: {
        if (tag == 16u) {
          set_has_field_length();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &field_length_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required int32 field_width = 3;
      case 3: {
        if (tag == 24u) {
          set_has_field_width();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &field_width_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required int32 boundary_width = 4;
      case 4: {
        if (tag == 32u) {
          set_has_boundary_width();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &boundary_width_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required int32 referee_width = 5;
      case 5: {
        if (tag == 40u) {
          set_has_referee_width();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &referee_width_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required int32 goal_width = 6;
      case 6: {
        if (tag == 48u) {
          set_has_goal_width();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &goal_width_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required int32 goal_depth = 7;
      case 7: {
        if (tag == 56u) {
          set_has_goal_depth();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &goal_depth_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required int32 goal_wall_width = 8;
      case 8: {
        if (tag == 64u) {
          set_has_goal_wall_width();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &goal_wall_width_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required int32 center_circle_radius = 9;
      case 9: {
        if (tag == 72u) {
          set_has_center_circle_radius();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &center_circle_radius_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required int32 defense_radius = 10;
      case 10: {
        if (tag == 80u) {
          set_has_defense_radius();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &defense_radius_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required int32 defense_stretch = 11;
      case 11: {
        if (tag == 88u) {
          set_has_defense_stretch();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &defense_stretch_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required int32 free_kick_from_defense_dist = 12;
      case 12: {
        if (tag == 96u) {
          set_has_free_kick_from_defense_dist();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &free_kick_from_defense_dist_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required int32 penalty_spot_from_field_line_dist = 13;
      case 13: {
        if (tag == 104u) {
          set_has_penalty_spot_from_field_line_dist();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &penalty_spot_from_field_line_dist_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required int32 penalty_line_from_spot_dist = 14;
      case 14: {
        if (tag == 112u) {
          set_has_penalty_line_from_spot_dist();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &penalty_line_from_spot_dist_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:SSL_GeometryFieldSize)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:SSL_GeometryFieldSize)
  return false;
#undef DO_
}

void SSL_GeometryFieldSize::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:SSL_GeometryFieldSize)
  // required int32 line_width = 1;
  if (has_line_width()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->line_width(), output);
  }

  // required int32 field_length = 2;
  if (has_field_length()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->field_length(), output);
  }

  // required int32 field_width = 3;
  if (has_field_width()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->field_width(), output);
  }

  // required int32 boundary_width = 4;
  if (has_boundary_width()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->boundary_width(), output);
  }

  // required int32 referee_width = 5;
  if (has_referee_width()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->referee_width(), output);
  }

  // required int32 goal_width = 6;
  if (has_goal_width()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->goal_width(), output);
  }

  // required int32 goal_depth = 7;
  if (has_goal_depth()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->goal_depth(), output);
  }

  // required int32 goal_wall_width = 8;
  if (has_goal_wall_width()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(8, this->goal_wall_width(), output);
  }

  // required int32 center_circle_radius = 9;
  if (has_center_circle_radius()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(9, this->center_circle_radius(), output);
  }

  // required int32 defense_radius = 10;
  if (has_defense_radius()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(10, this->defense_radius(), output);
  }

  // required int32 defense_stretch = 11;
  if (has_defense_stretch()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(11, this->defense_stretch(), output);
  }

  // required int32 free_kick_from_defense_dist = 12;
  if (has_free_kick_from_defense_dist()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(12, this->free_kick_from_defense_dist(), output);
  }

  // required int32 penalty_spot_from_field_line_dist = 13;
  if (has_penalty_spot_from_field_line_dist()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(13, this->penalty_spot_from_field_line_dist(), output);
  }

  // required int32 penalty_line_from_spot_dist = 14;
  if (has_penalty_line_from_spot_dist()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(14, this->penalty_line_from_spot_dist(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:SSL_GeometryFieldSize)
}

::google::protobuf::uint8* SSL_GeometryFieldSize::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:SSL_GeometryFieldSize)
  // required int32 line_width = 1;
  if (has_line_width()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->line_width(), target);
  }

  // required int32 field_length = 2;
  if (has_field_length()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->field_length(), target);
  }

  // required int32 field_width = 3;
  if (has_field_width()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->field_width(), target);
  }

  // required int32 boundary_width = 4;
  if (has_boundary_width()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->boundary_width(), target);
  }

  // required int32 referee_width = 5;
  if (has_referee_width()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->referee_width(), target);
  }

  // required int32 goal_width = 6;
  if (has_goal_width()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->goal_width(), target);
  }

  // required int32 goal_depth = 7;
  if (has_goal_depth()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->goal_depth(), target);
  }

  // required int32 goal_wall_width = 8;
  if (has_goal_wall_width()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(8, this->goal_wall_width(), target);
  }

  // required int32 center_circle_radius = 9;
  if (has_center_circle_radius()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(9, this->center_circle_radius(), target);
  }

  // required int32 defense_radius = 10;
  if (has_defense_radius()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(10, this->defense_radius(), target);
  }

  // required int32 defense_stretch = 11;
  if (has_defense_stretch()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(11, this->defense_stretch(), target);
  }

  // required int32 free_kick_from_defense_dist = 12;
  if (has_free_kick_from_defense_dist()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(12, this->free_kick_from_defense_dist(), target);
  }

  // required int32 penalty_spot_from_field_line_dist = 13;
  if (has_penalty_spot_from_field_line_dist()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(13, this->penalty_spot_from_field_line_dist(), target);
  }

  // required int32 penalty_line_from_spot_dist = 14;
  if (has_penalty_line_from_spot_dist()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(14, this->penalty_line_from_spot_dist(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:SSL_GeometryFieldSize)
  return target;
}

size_t SSL_GeometryFieldSize::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:SSL_GeometryFieldSize)
  size_t total_size = 0;

  if (has_line_width()) {
    // required int32 line_width = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->line_width());
  }

  if (has_field_length()) {
    // required int32 field_length = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->field_length());
  }

  if (has_field_width()) {
    // required int32 field_width = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->field_width());
  }

  if (has_boundary_width()) {
    // required int32 boundary_width = 4;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->boundary_width());
  }

  if (has_referee_width()) {
    // required int32 referee_width = 5;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->referee_width());
  }

  if (has_goal_width()) {
    // required int32 goal_width = 6;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->goal_width());
  }

  if (has_goal_depth()) {
    // required int32 goal_depth = 7;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->goal_depth());
  }

  if (has_goal_wall_width()) {
    // required int32 goal_wall_width = 8;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->goal_wall_width());
  }

  if (has_center_circle_radius()) {
    // required int32 center_circle_radius = 9;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->center_circle_radius());
  }

  if (has_defense_radius()) {
    // required int32 defense_radius = 10;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->defense_radius());
  }

  if (has_defense_stretch()) {
    // required int32 defense_stretch = 11;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->defense_stretch());
  }

  if (has_free_kick_from_defense_dist()) {
    // required int32 free_kick_from_defense_dist = 12;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->free_kick_from_defense_dist());
  }

  if (has_penalty_spot_from_field_line_dist()) {
    // required int32 penalty_spot_from_field_line_dist = 13;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->penalty_spot_from_field_line_dist());
  }

  if (has_penalty_line_from_spot_dist()) {
    // required int32 penalty_line_from_spot_dist = 14;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->penalty_line_from_spot_dist());
  }

  return total_size;
}
size_t SSL_GeometryFieldSize::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:SSL_GeometryFieldSize)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (((_has_bits_[0] & 0x00003fff) ^ 0x00003fff) == 0) {  // All required fields are present.
    // required int32 line_width = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->line_width());

    // required int32 field_length = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->field_length());

    // required int32 field_width = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->field_width());

    // required int32 boundary_width = 4;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->boundary_width());

    // required int32 referee_width = 5;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->referee_width());

    // required int32 goal_width = 6;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->goal_width());

    // required int32 goal_depth = 7;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->goal_depth());

    // required int32 goal_wall_width = 8;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->goal_wall_width());

    // required int32 center_circle_radius = 9;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->center_circle_radius());

    // required int32 defense_radius = 10;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->defense_radius());

    // required int32 defense_stretch = 11;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->defense_stretch());

    // required int32 free_kick_from_defense_dist = 12;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->free_kick_from_defense_dist());

    // required int32 penalty_spot_from_field_line_dist = 13;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->penalty_spot_from_field_line_dist());

    // required int32 penalty_line_from_spot_dist = 14;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->penalty_line_from_spot_dist());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SSL_GeometryFieldSize::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:SSL_GeometryFieldSize)
  GOOGLE_DCHECK_NE(&from, this);
  const SSL_GeometryFieldSize* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const SSL_GeometryFieldSize>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:SSL_GeometryFieldSize)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:SSL_GeometryFieldSize)
    MergeFrom(*source);
  }
}

void SSL_GeometryFieldSize::MergeFrom(const SSL_GeometryFieldSize& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:SSL_GeometryFieldSize)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from._has_bits_[0 / 32] & 255u) {
    if (from.has_line_width()) {
      set_line_width(from.line_width());
    }
    if (from.has_field_length()) {
      set_field_length(from.field_length());
    }
    if (from.has_field_width()) {
      set_field_width(from.field_width());
    }
    if (from.has_boundary_width()) {
      set_boundary_width(from.boundary_width());
    }
    if (from.has_referee_width()) {
      set_referee_width(from.referee_width());
    }
    if (from.has_goal_width()) {
      set_goal_width(from.goal_width());
    }
    if (from.has_goal_depth()) {
      set_goal_depth(from.goal_depth());
    }
    if (from.has_goal_wall_width()) {
      set_goal_wall_width(from.goal_wall_width());
    }
  }
  if (from._has_bits_[8 / 32] & 16128u) {
    if (from.has_center_circle_radius()) {
      set_center_circle_radius(from.center_circle_radius());
    }
    if (from.has_defense_radius()) {
      set_defense_radius(from.defense_radius());
    }
    if (from.has_defense_stretch()) {
      set_defense_stretch(from.defense_stretch());
    }
    if (from.has_free_kick_from_defense_dist()) {
      set_free_kick_from_defense_dist(from.free_kick_from_defense_dist());
    }
    if (from.has_penalty_spot_from_field_line_dist()) {
      set_penalty_spot_from_field_line_dist(from.penalty_spot_from_field_line_dist());
    }
    if (from.has_penalty_line_from_spot_dist()) {
      set_penalty_line_from_spot_dist(from.penalty_line_from_spot_dist());
    }
  }
}

void SSL_GeometryFieldSize::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:SSL_GeometryFieldSize)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SSL_GeometryFieldSize::CopyFrom(const SSL_GeometryFieldSize& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:SSL_GeometryFieldSize)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SSL_GeometryFieldSize::IsInitialized() const {
  if ((_has_bits_[0] & 0x00003fff) != 0x00003fff) return false;
  return true;
}

void SSL_GeometryFieldSize::Swap(SSL_GeometryFieldSize* other) {
  if (other == this) return;
  InternalSwap(other);
}
void SSL_GeometryFieldSize::InternalSwap(SSL_GeometryFieldSize* other) {
  std::swap(line_width_, other->line_width_);
  std::swap(field_length_, other->field_length_);
  std::swap(field_width_, other->field_width_);
  std::swap(boundary_width_, other->boundary_width_);
  std::swap(referee_width_, other->referee_width_);
  std::swap(goal_width_, other->goal_width_);
  std::swap(goal_depth_, other->goal_depth_);
  std::swap(goal_wall_width_, other->goal_wall_width_);
  std::swap(center_circle_radius_, other->center_circle_radius_);
  std::swap(defense_radius_, other->defense_radius_);
  std::swap(defense_stretch_, other->defense_stretch_);
  std::swap(free_kick_from_defense_dist_, other->free_kick_from_defense_dist_);
  std::swap(penalty_spot_from_field_line_dist_, other->penalty_spot_from_field_line_dist_);
  std::swap(penalty_line_from_spot_dist_, other->penalty_line_from_spot_dist_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata SSL_GeometryFieldSize::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  return file_level_metadata[0];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// SSL_GeometryFieldSize

// required int32 line_width = 1;
bool SSL_GeometryFieldSize::has_line_width() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void SSL_GeometryFieldSize::set_has_line_width() {
  _has_bits_[0] |= 0x00000001u;
}
void SSL_GeometryFieldSize::clear_has_line_width() {
  _has_bits_[0] &= ~0x00000001u;
}
void SSL_GeometryFieldSize::clear_line_width() {
  line_width_ = 0;
  clear_has_line_width();
}
::google::protobuf::int32 SSL_GeometryFieldSize::line_width() const {
  // @@protoc_insertion_point(field_get:SSL_GeometryFieldSize.line_width)
  return line_width_;
}
void SSL_GeometryFieldSize::set_line_width(::google::protobuf::int32 value) {
  set_has_line_width();
  line_width_ = value;
  // @@protoc_insertion_point(field_set:SSL_GeometryFieldSize.line_width)
}

// required int32 field_length = 2;
bool SSL_GeometryFieldSize::has_field_length() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void SSL_GeometryFieldSize::set_has_field_length() {
  _has_bits_[0] |= 0x00000002u;
}
void SSL_GeometryFieldSize::clear_has_field_length() {
  _has_bits_[0] &= ~0x00000002u;
}
void SSL_GeometryFieldSize::clear_field_length() {
  field_length_ = 0;
  clear_has_field_length();
}
::google::protobuf::int32 SSL_GeometryFieldSize::field_length() const {
  // @@protoc_insertion_point(field_get:SSL_GeometryFieldSize.field_length)
  return field_length_;
}
void SSL_GeometryFieldSize::set_field_length(::google::protobuf::int32 value) {
  set_has_field_length();
  field_length_ = value;
  // @@protoc_insertion_point(field_set:SSL_GeometryFieldSize.field_length)
}

// required int32 field_width = 3;
bool SSL_GeometryFieldSize::has_field_width() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void SSL_GeometryFieldSize::set_has_field_width() {
  _has_bits_[0] |= 0x00000004u;
}
void SSL_GeometryFieldSize::clear_has_field_width() {
  _has_bits_[0] &= ~0x00000004u;
}
void SSL_GeometryFieldSize::clear_field_width() {
  field_width_ = 0;
  clear_has_field_width();
}
::google::protobuf::int32 SSL_GeometryFieldSize::field_width() const {
  // @@protoc_insertion_point(field_get:SSL_GeometryFieldSize.field_width)
  return field_width_;
}
void SSL_GeometryFieldSize::set_field_width(::google::protobuf::int32 value) {
  set_has_field_width();
  field_width_ = value;
  // @@protoc_insertion_point(field_set:SSL_GeometryFieldSize.field_width)
}

// required int32 boundary_width = 4;
bool SSL_GeometryFieldSize::has_boundary_width() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void SSL_GeometryFieldSize::set_has_boundary_width() {
  _has_bits_[0] |= 0x00000008u;
}
void SSL_GeometryFieldSize::clear_has_boundary_width() {
  _has_bits_[0] &= ~0x00000008u;
}
void SSL_GeometryFieldSize::clear_boundary_width() {
  boundary_width_ = 0;
  clear_has_boundary_width();
}
::google::protobuf::int32 SSL_GeometryFieldSize::boundary_width() const {
  // @@protoc_insertion_point(field_get:SSL_GeometryFieldSize.boundary_width)
  return boundary_width_;
}
void SSL_GeometryFieldSize::set_boundary_width(::google::protobuf::int32 value) {
  set_has_boundary_width();
  boundary_width_ = value;
  // @@protoc_insertion_point(field_set:SSL_GeometryFieldSize.boundary_width)
}

// required int32 referee_width = 5;
bool SSL_GeometryFieldSize::has_referee_width() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void SSL_GeometryFieldSize::set_has_referee_width() {
  _has_bits_[0] |= 0x00000010u;
}
void SSL_GeometryFieldSize::clear_has_referee_width() {
  _has_bits_[0] &= ~0x00000010u;
}
void SSL_GeometryFieldSize::clear_referee_width() {
  referee_width_ = 0;
  clear_has_referee_width();
}
::google::protobuf::int32 SSL_GeometryFieldSize::referee_width() const {
  // @@protoc_insertion_point(field_get:SSL_GeometryFieldSize.referee_width)
  return referee_width_;
}
void SSL_GeometryFieldSize::set_referee_width(::google::protobuf::int32 value) {
  set_has_referee_width();
  referee_width_ = value;
  // @@protoc_insertion_point(field_set:SSL_GeometryFieldSize.referee_width)
}

// required int32 goal_width = 6;
bool SSL_GeometryFieldSize::has_goal_width() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
void SSL_GeometryFieldSize::set_has_goal_width() {
  _has_bits_[0] |= 0x00000020u;
}
void SSL_GeometryFieldSize::clear_has_goal_width() {
  _has_bits_[0] &= ~0x00000020u;
}
void SSL_GeometryFieldSize::clear_goal_width() {
  goal_width_ = 0;
  clear_has_goal_width();
}
::google::protobuf::int32 SSL_GeometryFieldSize::goal_width() const {
  // @@protoc_insertion_point(field_get:SSL_GeometryFieldSize.goal_width)
  return goal_width_;
}
void SSL_GeometryFieldSize::set_goal_width(::google::protobuf::int32 value) {
  set_has_goal_width();
  goal_width_ = value;
  // @@protoc_insertion_point(field_set:SSL_GeometryFieldSize.goal_width)
}

// required int32 goal_depth = 7;
bool SSL_GeometryFieldSize::has_goal_depth() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
void SSL_GeometryFieldSize::set_has_goal_depth() {
  _has_bits_[0] |= 0x00000040u;
}
void SSL_GeometryFieldSize::clear_has_goal_depth() {
  _has_bits_[0] &= ~0x00000040u;
}
void SSL_GeometryFieldSize::clear_goal_depth() {
  goal_depth_ = 0;
  clear_has_goal_depth();
}
::google::protobuf::int32 SSL_GeometryFieldSize::goal_depth() const {
  // @@protoc_insertion_point(field_get:SSL_GeometryFieldSize.goal_depth)
  return goal_depth_;
}
void SSL_GeometryFieldSize::set_goal_depth(::google::protobuf::int32 value) {
  set_has_goal_depth();
  goal_depth_ = value;
  // @@protoc_insertion_point(field_set:SSL_GeometryFieldSize.goal_depth)
}

// required int32 goal_wall_width = 8;
bool SSL_GeometryFieldSize::has_goal_wall_width() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
void SSL_GeometryFieldSize::set_has_goal_wall_width() {
  _has_bits_[0] |= 0x00000080u;
}
void SSL_GeometryFieldSize::clear_has_goal_wall_width() {
  _has_bits_[0] &= ~0x00000080u;
}
void SSL_GeometryFieldSize::clear_goal_wall_width() {
  goal_wall_width_ = 0;
  clear_has_goal_wall_width();
}
::google::protobuf::int32 SSL_GeometryFieldSize::goal_wall_width() const {
  // @@protoc_insertion_point(field_get:SSL_GeometryFieldSize.goal_wall_width)
  return goal_wall_width_;
}
void SSL_GeometryFieldSize::set_goal_wall_width(::google::protobuf::int32 value) {
  set_has_goal_wall_width();
  goal_wall_width_ = value;
  // @@protoc_insertion_point(field_set:SSL_GeometryFieldSize.goal_wall_width)
}

// required int32 center_circle_radius = 9;
bool SSL_GeometryFieldSize::has_center_circle_radius() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
void SSL_GeometryFieldSize::set_has_center_circle_radius() {
  _has_bits_[0] |= 0x00000100u;
}
void SSL_GeometryFieldSize::clear_has_center_circle_radius() {
  _has_bits_[0] &= ~0x00000100u;
}
void SSL_GeometryFieldSize::clear_center_circle_radius() {
  center_circle_radius_ = 0;
  clear_has_center_circle_radius();
}
::google::protobuf::int32 SSL_GeometryFieldSize::center_circle_radius() const {
  // @@protoc_insertion_point(field_get:SSL_GeometryFieldSize.center_circle_radius)
  return center_circle_radius_;
}
void SSL_GeometryFieldSize::set_center_circle_radius(::google::protobuf::int32 value) {
  set_has_center_circle_radius();
  center_circle_radius_ = value;
  // @@protoc_insertion_point(field_set:SSL_GeometryFieldSize.center_circle_radius)
}

// required int32 defense_radius = 10;
bool SSL_GeometryFieldSize::has_defense_radius() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
void SSL_GeometryFieldSize::set_has_defense_radius() {
  _has_bits_[0] |= 0x00000200u;
}
void SSL_GeometryFieldSize::clear_has_defense_radius() {
  _has_bits_[0] &= ~0x00000200u;
}
void SSL_GeometryFieldSize::clear_defense_radius() {
  defense_radius_ = 0;
  clear_has_defense_radius();
}
::google::protobuf::int32 SSL_GeometryFieldSize::defense_radius() const {
  // @@protoc_insertion_point(field_get:SSL_GeometryFieldSize.defense_radius)
  return defense_radius_;
}
void SSL_GeometryFieldSize::set_defense_radius(::google::protobuf::int32 value) {
  set_has_defense_radius();
  defense_radius_ = value;
  // @@protoc_insertion_point(field_set:SSL_GeometryFieldSize.defense_radius)
}

// required int32 defense_stretch = 11;
bool SSL_GeometryFieldSize::has_defense_stretch() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
void SSL_GeometryFieldSize::set_has_defense_stretch() {
  _has_bits_[0] |= 0x00000400u;
}
void SSL_GeometryFieldSize::clear_has_defense_stretch() {
  _has_bits_[0] &= ~0x00000400u;
}
void SSL_GeometryFieldSize::clear_defense_stretch() {
  defense_stretch_ = 0;
  clear_has_defense_stretch();
}
::google::protobuf::int32 SSL_GeometryFieldSize::defense_stretch() const {
  // @@protoc_insertion_point(field_get:SSL_GeometryFieldSize.defense_stretch)
  return defense_stretch_;
}
void SSL_GeometryFieldSize::set_defense_stretch(::google::protobuf::int32 value) {
  set_has_defense_stretch();
  defense_stretch_ = value;
  // @@protoc_insertion_point(field_set:SSL_GeometryFieldSize.defense_stretch)
}

// required int32 free_kick_from_defense_dist = 12;
bool SSL_GeometryFieldSize::has_free_kick_from_defense_dist() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
void SSL_GeometryFieldSize::set_has_free_kick_from_defense_dist() {
  _has_bits_[0] |= 0x00000800u;
}
void SSL_GeometryFieldSize::clear_has_free_kick_from_defense_dist() {
  _has_bits_[0] &= ~0x00000800u;
}
void SSL_GeometryFieldSize::clear_free_kick_from_defense_dist() {
  free_kick_from_defense_dist_ = 0;
  clear_has_free_kick_from_defense_dist();
}
::google::protobuf::int32 SSL_GeometryFieldSize::free_kick_from_defense_dist() const {
  // @@protoc_insertion_point(field_get:SSL_GeometryFieldSize.free_kick_from_defense_dist)
  return free_kick_from_defense_dist_;
}
void SSL_GeometryFieldSize::set_free_kick_from_defense_dist(::google::protobuf::int32 value) {
  set_has_free_kick_from_defense_dist();
  free_kick_from_defense_dist_ = value;
  // @@protoc_insertion_point(field_set:SSL_GeometryFieldSize.free_kick_from_defense_dist)
}

// required int32 penalty_spot_from_field_line_dist = 13;
bool SSL_GeometryFieldSize::has_penalty_spot_from_field_line_dist() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
void SSL_GeometryFieldSize::set_has_penalty_spot_from_field_line_dist() {
  _has_bits_[0] |= 0x00001000u;
}
void SSL_GeometryFieldSize::clear_has_penalty_spot_from_field_line_dist() {
  _has_bits_[0] &= ~0x00001000u;
}
void SSL_GeometryFieldSize::clear_penalty_spot_from_field_line_dist() {
  penalty_spot_from_field_line_dist_ = 0;
  clear_has_penalty_spot_from_field_line_dist();
}
::google::protobuf::int32 SSL_GeometryFieldSize::penalty_spot_from_field_line_dist() const {
  // @@protoc_insertion_point(field_get:SSL_GeometryFieldSize.penalty_spot_from_field_line_dist)
  return penalty_spot_from_field_line_dist_;
}
void SSL_GeometryFieldSize::set_penalty_spot_from_field_line_dist(::google::protobuf::int32 value) {
  set_has_penalty_spot_from_field_line_dist();
  penalty_spot_from_field_line_dist_ = value;
  // @@protoc_insertion_point(field_set:SSL_GeometryFieldSize.penalty_spot_from_field_line_dist)
}

// required int32 penalty_line_from_spot_dist = 14;
bool SSL_GeometryFieldSize::has_penalty_line_from_spot_dist() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
void SSL_GeometryFieldSize::set_has_penalty_line_from_spot_dist() {
  _has_bits_[0] |= 0x00002000u;
}
void SSL_GeometryFieldSize::clear_has_penalty_line_from_spot_dist() {
  _has_bits_[0] &= ~0x00002000u;
}
void SSL_GeometryFieldSize::clear_penalty_line_from_spot_dist() {
  penalty_line_from_spot_dist_ = 0;
  clear_has_penalty_line_from_spot_dist();
}
::google::protobuf::int32 SSL_GeometryFieldSize::penalty_line_from_spot_dist() const {
  // @@protoc_insertion_point(field_get:SSL_GeometryFieldSize.penalty_line_from_spot_dist)
  return penalty_line_from_spot_dist_;
}
void SSL_GeometryFieldSize::set_penalty_line_from_spot_dist(::google::protobuf::int32 value) {
  set_has_penalty_line_from_spot_dist();
  penalty_line_from_spot_dist_ = value;
  // @@protoc_insertion_point(field_set:SSL_GeometryFieldSize.penalty_line_from_spot_dist)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int SSL_GeometryCameraCalibration::kCameraIdFieldNumber;
const int SSL_GeometryCameraCalibration::kFocalLengthFieldNumber;
const int SSL_GeometryCameraCalibration::kPrincipalPointXFieldNumber;
const int SSL_GeometryCameraCalibration::kPrincipalPointYFieldNumber;
const int SSL_GeometryCameraCalibration::kDistortionFieldNumber;
const int SSL_GeometryCameraCalibration::kQ0FieldNumber;
const int SSL_GeometryCameraCalibration::kQ1FieldNumber;
const int SSL_GeometryCameraCalibration::kQ2FieldNumber;
const int SSL_GeometryCameraCalibration::kQ3FieldNumber;
const int SSL_GeometryCameraCalibration::kTxFieldNumber;
const int SSL_GeometryCameraCalibration::kTyFieldNumber;
const int SSL_GeometryCameraCalibration::kTzFieldNumber;
const int SSL_GeometryCameraCalibration::kDerivedCameraWorldTxFieldNumber;
const int SSL_GeometryCameraCalibration::kDerivedCameraWorldTyFieldNumber;
const int SSL_GeometryCameraCalibration::kDerivedCameraWorldTzFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SSL_GeometryCameraCalibration::SSL_GeometryCameraCalibration()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_InitDefaults_messages_5frobocup_5fssl_5fgeometry_2eproto();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:SSL_GeometryCameraCalibration)
}
SSL_GeometryCameraCalibration::SSL_GeometryCameraCalibration(const SSL_GeometryCameraCalibration& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&camera_id_, &from.camera_id_,
    reinterpret_cast<char*>(&derived_camera_world_tz_) -
    reinterpret_cast<char*>(&camera_id_) + sizeof(derived_camera_world_tz_));
  // @@protoc_insertion_point(copy_constructor:SSL_GeometryCameraCalibration)
}

void SSL_GeometryCameraCalibration::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&camera_id_, 0, reinterpret_cast<char*>(&derived_camera_world_tz_) -
    reinterpret_cast<char*>(&camera_id_) + sizeof(derived_camera_world_tz_));
}

SSL_GeometryCameraCalibration::~SSL_GeometryCameraCalibration() {
  // @@protoc_insertion_point(destructor:SSL_GeometryCameraCalibration)
  SharedDtor();
}

void SSL_GeometryCameraCalibration::SharedDtor() {
}

void SSL_GeometryCameraCalibration::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SSL_GeometryCameraCalibration::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return file_level_metadata[1].descriptor;
}

const SSL_GeometryCameraCalibration& SSL_GeometryCameraCalibration::default_instance() {
  protobuf_InitDefaults_messages_5frobocup_5fssl_5fgeometry_2eproto();
  return *internal_default_instance();
}

SSL_GeometryCameraCalibration* SSL_GeometryCameraCalibration::New(::google::protobuf::Arena* arena) const {
  SSL_GeometryCameraCalibration* n = new SSL_GeometryCameraCalibration;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void SSL_GeometryCameraCalibration::Clear() {
// @@protoc_insertion_point(message_clear_start:SSL_GeometryCameraCalibration)
  if (_has_bits_[0 / 32] & 255u) {
    ::memset(&camera_id_, 0, reinterpret_cast<char*>(&q2_) -
      reinterpret_cast<char*>(&camera_id_) + sizeof(q2_));
  }
  if (_has_bits_[8 / 32] & 32512u) {
    ::memset(&q3_, 0, reinterpret_cast<char*>(&derived_camera_world_tz_) -
      reinterpret_cast<char*>(&q3_) + sizeof(derived_camera_world_tz_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool SSL_GeometryCameraCalibration::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:SSL_GeometryCameraCalibration)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 camera_id = 1;
      case 1: {
        if (tag == 8u) {
          set_has_camera_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &camera_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required float focal_length = 2;
      case 2: {
        if (tag == 21u) {
          set_has_focal_length();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &focal_length_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required float principal_point_x = 3;
      case 3: {
        if (tag == 29u) {
          set_has_principal_point_x();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &principal_point_x_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required float principal_point_y = 4;
      case 4: {
        if (tag == 37u) {
          set_has_principal_point_y();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &principal_point_y_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required float distortion = 5;
      case 5: {
        if (tag == 45u) {
          set_has_distortion();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &distortion_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required float q0 = 6;
      case 6: {
        if (tag == 53u) {
          set_has_q0();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &q0_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required float q1 = 7;
      case 7: {
        if (tag == 61u) {
          set_has_q1();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &q1_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required float q2 = 8;
      case 8: {
        if (tag == 69u) {
          set_has_q2();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &q2_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required float q3 = 9;
      case 9: {
        if (tag == 77u) {
          set_has_q3();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &q3_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required float tx = 10;
      case 10: {
        if (tag == 85u) {
          set_has_tx();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &tx_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required float ty = 11;
      case 11: {
        if (tag == 93u) {
          set_has_ty();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &ty_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required float tz = 12;
      case 12: {
        if (tag == 101u) {
          set_has_tz();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &tz_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float derived_camera_world_tx = 13;
      case 13: {
        if (tag == 109u) {
          set_has_derived_camera_world_tx();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &derived_camera_world_tx_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float derived_camera_world_ty = 14;
      case 14: {
        if (tag == 117u) {
          set_has_derived_camera_world_ty();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &derived_camera_world_ty_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float derived_camera_world_tz = 15;
      case 15: {
        if (tag == 125u) {
          set_has_derived_camera_world_tz();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &derived_camera_world_tz_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:SSL_GeometryCameraCalibration)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:SSL_GeometryCameraCalibration)
  return false;
#undef DO_
}

void SSL_GeometryCameraCalibration::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:SSL_GeometryCameraCalibration)
  // required uint32 camera_id = 1;
  if (has_camera_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->camera_id(), output);
  }

  // required float focal_length = 2;
  if (has_focal_length()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(2, this->focal_length(), output);
  }

  // required float principal_point_x = 3;
  if (has_principal_point_x()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(3, this->principal_point_x(), output);
  }

  // required float principal_point_y = 4;
  if (has_principal_point_y()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(4, this->principal_point_y(), output);
  }

  // required float distortion = 5;
  if (has_distortion()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(5, this->distortion(), output);
  }

  // required float q0 = 6;
  if (has_q0()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(6, this->q0(), output);
  }

  // required float q1 = 7;
  if (has_q1()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(7, this->q1(), output);
  }

  // required float q2 = 8;
  if (has_q2()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(8, this->q2(), output);
  }

  // required float q3 = 9;
  if (has_q3()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(9, this->q3(), output);
  }

  // required float tx = 10;
  if (has_tx()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(10, this->tx(), output);
  }

  // required float ty = 11;
  if (has_ty()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(11, this->ty(), output);
  }

  // required float tz = 12;
  if (has_tz()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(12, this->tz(), output);
  }

  // optional float derived_camera_world_tx = 13;
  if (has_derived_camera_world_tx()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(13, this->derived_camera_world_tx(), output);
  }

  // optional float derived_camera_world_ty = 14;
  if (has_derived_camera_world_ty()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(14, this->derived_camera_world_ty(), output);
  }

  // optional float derived_camera_world_tz = 15;
  if (has_derived_camera_world_tz()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(15, this->derived_camera_world_tz(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:SSL_GeometryCameraCalibration)
}

::google::protobuf::uint8* SSL_GeometryCameraCalibration::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:SSL_GeometryCameraCalibration)
  // required uint32 camera_id = 1;
  if (has_camera_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->camera_id(), target);
  }

  // required float focal_length = 2;
  if (has_focal_length()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(2, this->focal_length(), target);
  }

  // required float principal_point_x = 3;
  if (has_principal_point_x()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(3, this->principal_point_x(), target);
  }

  // required float principal_point_y = 4;
  if (has_principal_point_y()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(4, this->principal_point_y(), target);
  }

  // required float distortion = 5;
  if (has_distortion()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(5, this->distortion(), target);
  }

  // required float q0 = 6;
  if (has_q0()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(6, this->q0(), target);
  }

  // required float q1 = 7;
  if (has_q1()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(7, this->q1(), target);
  }

  // required float q2 = 8;
  if (has_q2()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(8, this->q2(), target);
  }

  // required float q3 = 9;
  if (has_q3()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(9, this->q3(), target);
  }

  // required float tx = 10;
  if (has_tx()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(10, this->tx(), target);
  }

  // required float ty = 11;
  if (has_ty()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(11, this->ty(), target);
  }

  // required float tz = 12;
  if (has_tz()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(12, this->tz(), target);
  }

  // optional float derived_camera_world_tx = 13;
  if (has_derived_camera_world_tx()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(13, this->derived_camera_world_tx(), target);
  }

  // optional float derived_camera_world_ty = 14;
  if (has_derived_camera_world_ty()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(14, this->derived_camera_world_ty(), target);
  }

  // optional float derived_camera_world_tz = 15;
  if (has_derived_camera_world_tz()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(15, this->derived_camera_world_tz(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:SSL_GeometryCameraCalibration)
  return target;
}

size_t SSL_GeometryCameraCalibration::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:SSL_GeometryCameraCalibration)
  size_t total_size = 0;

  if (has_camera_id()) {
    // required uint32 camera_id = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->camera_id());
  }

  if (has_focal_length()) {
    // required float focal_length = 2;
    total_size += 1 + 4;
  }

  if (has_principal_point_x()) {
    // required float principal_point_x = 3;
    total_size += 1 + 4;
  }

  if (has_principal_point_y()) {
    // required float principal_point_y = 4;
    total_size += 1 + 4;
  }

  if (has_distortion()) {
    // required float distortion = 5;
    total_size += 1 + 4;
  }

  if (has_q0()) {
    // required float q0 = 6;
    total_size += 1 + 4;
  }

  if (has_q1()) {
    // required float q1 = 7;
    total_size += 1 + 4;
  }

  if (has_q2()) {
    // required float q2 = 8;
    total_size += 1 + 4;
  }

  if (has_q3()) {
    // required float q3 = 9;
    total_size += 1 + 4;
  }

  if (has_tx()) {
    // required float tx = 10;
    total_size += 1 + 4;
  }

  if (has_ty()) {
    // required float ty = 11;
    total_size += 1 + 4;
  }

  if (has_tz()) {
    // required float tz = 12;
    total_size += 1 + 4;
  }

  return total_size;
}
size_t SSL_GeometryCameraCalibration::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:SSL_GeometryCameraCalibration)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (((_has_bits_[0] & 0x00000fff) ^ 0x00000fff) == 0) {  // All required fields are present.
    // required uint32 camera_id = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->camera_id());

    // required float focal_length = 2;
    total_size += 1 + 4;

    // required float principal_point_x = 3;
    total_size += 1 + 4;

    // required float principal_point_y = 4;
    total_size += 1 + 4;

    // required float distortion = 5;
    total_size += 1 + 4;

    // required float q0 = 6;
    total_size += 1 + 4;

    // required float q1 = 7;
    total_size += 1 + 4;

    // required float q2 = 8;
    total_size += 1 + 4;

    // required float q3 = 9;
    total_size += 1 + 4;

    // required float tx = 10;
    total_size += 1 + 4;

    // required float ty = 11;
    total_size += 1 + 4;

    // required float tz = 12;
    total_size += 1 + 4;

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  if (_has_bits_[8 / 32] & 28672u) {
    // optional float derived_camera_world_tx = 13;
    if (has_derived_camera_world_tx()) {
      total_size += 1 + 4;
    }

    // optional float derived_camera_world_ty = 14;
    if (has_derived_camera_world_ty()) {
      total_size += 1 + 4;
    }

    // optional float derived_camera_world_tz = 15;
    if (has_derived_camera_world_tz()) {
      total_size += 1 + 4;
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SSL_GeometryCameraCalibration::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:SSL_GeometryCameraCalibration)
  GOOGLE_DCHECK_NE(&from, this);
  const SSL_GeometryCameraCalibration* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const SSL_GeometryCameraCalibration>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:SSL_GeometryCameraCalibration)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:SSL_GeometryCameraCalibration)
    MergeFrom(*source);
  }
}

void SSL_GeometryCameraCalibration::MergeFrom(const SSL_GeometryCameraCalibration& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:SSL_GeometryCameraCalibration)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from._has_bits_[0 / 32] & 255u) {
    if (from.has_camera_id()) {
      set_camera_id(from.camera_id());
    }
    if (from.has_focal_length()) {
      set_focal_length(from.focal_length());
    }
    if (from.has_principal_point_x()) {
      set_principal_point_x(from.principal_point_x());
    }
    if (from.has_principal_point_y()) {
      set_principal_point_y(from.principal_point_y());
    }
    if (from.has_distortion()) {
      set_distortion(from.distortion());
    }
    if (from.has_q0()) {
      set_q0(from.q0());
    }
    if (from.has_q1()) {
      set_q1(from.q1());
    }
    if (from.has_q2()) {
      set_q2(from.q2());
    }
  }
  if (from._has_bits_[8 / 32] & 32512u) {
    if (from.has_q3()) {
      set_q3(from.q3());
    }
    if (from.has_tx()) {
      set_tx(from.tx());
    }
    if (from.has_ty()) {
      set_ty(from.ty());
    }
    if (from.has_tz()) {
      set_tz(from.tz());
    }
    if (from.has_derived_camera_world_tx()) {
      set_derived_camera_world_tx(from.derived_camera_world_tx());
    }
    if (from.has_derived_camera_world_ty()) {
      set_derived_camera_world_ty(from.derived_camera_world_ty());
    }
    if (from.has_derived_camera_world_tz()) {
      set_derived_camera_world_tz(from.derived_camera_world_tz());
    }
  }
}

void SSL_GeometryCameraCalibration::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:SSL_GeometryCameraCalibration)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SSL_GeometryCameraCalibration::CopyFrom(const SSL_GeometryCameraCalibration& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:SSL_GeometryCameraCalibration)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SSL_GeometryCameraCalibration::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000fff) != 0x00000fff) return false;
  return true;
}

void SSL_GeometryCameraCalibration::Swap(SSL_GeometryCameraCalibration* other) {
  if (other == this) return;
  InternalSwap(other);
}
void SSL_GeometryCameraCalibration::InternalSwap(SSL_GeometryCameraCalibration* other) {
  std::swap(camera_id_, other->camera_id_);
  std::swap(focal_length_, other->focal_length_);
  std::swap(principal_point_x_, other->principal_point_x_);
  std::swap(principal_point_y_, other->principal_point_y_);
  std::swap(distortion_, other->distortion_);
  std::swap(q0_, other->q0_);
  std::swap(q1_, other->q1_);
  std::swap(q2_, other->q2_);
  std::swap(q3_, other->q3_);
  std::swap(tx_, other->tx_);
  std::swap(ty_, other->ty_);
  std::swap(tz_, other->tz_);
  std::swap(derived_camera_world_tx_, other->derived_camera_world_tx_);
  std::swap(derived_camera_world_ty_, other->derived_camera_world_ty_);
  std::swap(derived_camera_world_tz_, other->derived_camera_world_tz_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata SSL_GeometryCameraCalibration::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  return file_level_metadata[1];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// SSL_GeometryCameraCalibration

// required uint32 camera_id = 1;
bool SSL_GeometryCameraCalibration::has_camera_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void SSL_GeometryCameraCalibration::set_has_camera_id() {
  _has_bits_[0] |= 0x00000001u;
}
void SSL_GeometryCameraCalibration::clear_has_camera_id() {
  _has_bits_[0] &= ~0x00000001u;
}
void SSL_GeometryCameraCalibration::clear_camera_id() {
  camera_id_ = 0u;
  clear_has_camera_id();
}
::google::protobuf::uint32 SSL_GeometryCameraCalibration::camera_id() const {
  // @@protoc_insertion_point(field_get:SSL_GeometryCameraCalibration.camera_id)
  return camera_id_;
}
void SSL_GeometryCameraCalibration::set_camera_id(::google::protobuf::uint32 value) {
  set_has_camera_id();
  camera_id_ = value;
  // @@protoc_insertion_point(field_set:SSL_GeometryCameraCalibration.camera_id)
}

// required float focal_length = 2;
bool SSL_GeometryCameraCalibration::has_focal_length() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void SSL_GeometryCameraCalibration::set_has_focal_length() {
  _has_bits_[0] |= 0x00000002u;
}
void SSL_GeometryCameraCalibration::clear_has_focal_length() {
  _has_bits_[0] &= ~0x00000002u;
}
void SSL_GeometryCameraCalibration::clear_focal_length() {
  focal_length_ = 0;
  clear_has_focal_length();
}
float SSL_GeometryCameraCalibration::focal_length() const {
  // @@protoc_insertion_point(field_get:SSL_GeometryCameraCalibration.focal_length)
  return focal_length_;
}
void SSL_GeometryCameraCalibration::set_focal_length(float value) {
  set_has_focal_length();
  focal_length_ = value;
  // @@protoc_insertion_point(field_set:SSL_GeometryCameraCalibration.focal_length)
}

// required float principal_point_x = 3;
bool SSL_GeometryCameraCalibration::has_principal_point_x() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void SSL_GeometryCameraCalibration::set_has_principal_point_x() {
  _has_bits_[0] |= 0x00000004u;
}
void SSL_GeometryCameraCalibration::clear_has_principal_point_x() {
  _has_bits_[0] &= ~0x00000004u;
}
void SSL_GeometryCameraCalibration::clear_principal_point_x() {
  principal_point_x_ = 0;
  clear_has_principal_point_x();
}
float SSL_GeometryCameraCalibration::principal_point_x() const {
  // @@protoc_insertion_point(field_get:SSL_GeometryCameraCalibration.principal_point_x)
  return principal_point_x_;
}
void SSL_GeometryCameraCalibration::set_principal_point_x(float value) {
  set_has_principal_point_x();
  principal_point_x_ = value;
  // @@protoc_insertion_point(field_set:SSL_GeometryCameraCalibration.principal_point_x)
}

// required float principal_point_y = 4;
bool SSL_GeometryCameraCalibration::has_principal_point_y() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void SSL_GeometryCameraCalibration::set_has_principal_point_y() {
  _has_bits_[0] |= 0x00000008u;
}
void SSL_GeometryCameraCalibration::clear_has_principal_point_y() {
  _has_bits_[0] &= ~0x00000008u;
}
void SSL_GeometryCameraCalibration::clear_principal_point_y() {
  principal_point_y_ = 0;
  clear_has_principal_point_y();
}
float SSL_GeometryCameraCalibration::principal_point_y() const {
  // @@protoc_insertion_point(field_get:SSL_GeometryCameraCalibration.principal_point_y)
  return principal_point_y_;
}
void SSL_GeometryCameraCalibration::set_principal_point_y(float value) {
  set_has_principal_point_y();
  principal_point_y_ = value;
  // @@protoc_insertion_point(field_set:SSL_GeometryCameraCalibration.principal_point_y)
}

// required float distortion = 5;
bool SSL_GeometryCameraCalibration::has_distortion() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void SSL_GeometryCameraCalibration::set_has_distortion() {
  _has_bits_[0] |= 0x00000010u;
}
void SSL_GeometryCameraCalibration::clear_has_distortion() {
  _has_bits_[0] &= ~0x00000010u;
}
void SSL_GeometryCameraCalibration::clear_distortion() {
  distortion_ = 0;
  clear_has_distortion();
}
float SSL_GeometryCameraCalibration::distortion() const {
  // @@protoc_insertion_point(field_get:SSL_GeometryCameraCalibration.distortion)
  return distortion_;
}
void SSL_GeometryCameraCalibration::set_distortion(float value) {
  set_has_distortion();
  distortion_ = value;
  // @@protoc_insertion_point(field_set:SSL_GeometryCameraCalibration.distortion)
}

// required float q0 = 6;
bool SSL_GeometryCameraCalibration::has_q0() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
void SSL_GeometryCameraCalibration::set_has_q0() {
  _has_bits_[0] |= 0x00000020u;
}
void SSL_GeometryCameraCalibration::clear_has_q0() {
  _has_bits_[0] &= ~0x00000020u;
}
void SSL_GeometryCameraCalibration::clear_q0() {
  q0_ = 0;
  clear_has_q0();
}
float SSL_GeometryCameraCalibration::q0() const {
  // @@protoc_insertion_point(field_get:SSL_GeometryCameraCalibration.q0)
  return q0_;
}
void SSL_GeometryCameraCalibration::set_q0(float value) {
  set_has_q0();
  q0_ = value;
  // @@protoc_insertion_point(field_set:SSL_GeometryCameraCalibration.q0)
}

// required float q1 = 7;
bool SSL_GeometryCameraCalibration::has_q1() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
void SSL_GeometryCameraCalibration::set_has_q1() {
  _has_bits_[0] |= 0x00000040u;
}
void SSL_GeometryCameraCalibration::clear_has_q1() {
  _has_bits_[0] &= ~0x00000040u;
}
void SSL_GeometryCameraCalibration::clear_q1() {
  q1_ = 0;
  clear_has_q1();
}
float SSL_GeometryCameraCalibration::q1() const {
  // @@protoc_insertion_point(field_get:SSL_GeometryCameraCalibration.q1)
  return q1_;
}
void SSL_GeometryCameraCalibration::set_q1(float value) {
  set_has_q1();
  q1_ = value;
  // @@protoc_insertion_point(field_set:SSL_GeometryCameraCalibration.q1)
}

// required float q2 = 8;
bool SSL_GeometryCameraCalibration::has_q2() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
void SSL_GeometryCameraCalibration::set_has_q2() {
  _has_bits_[0] |= 0x00000080u;
}
void SSL_GeometryCameraCalibration::clear_has_q2() {
  _has_bits_[0] &= ~0x00000080u;
}
void SSL_GeometryCameraCalibration::clear_q2() {
  q2_ = 0;
  clear_has_q2();
}
float SSL_GeometryCameraCalibration::q2() const {
  // @@protoc_insertion_point(field_get:SSL_GeometryCameraCalibration.q2)
  return q2_;
}
void SSL_GeometryCameraCalibration::set_q2(float value) {
  set_has_q2();
  q2_ = value;
  // @@protoc_insertion_point(field_set:SSL_GeometryCameraCalibration.q2)
}

// required float q3 = 9;
bool SSL_GeometryCameraCalibration::has_q3() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
void SSL_GeometryCameraCalibration::set_has_q3() {
  _has_bits_[0] |= 0x00000100u;
}
void SSL_GeometryCameraCalibration::clear_has_q3() {
  _has_bits_[0] &= ~0x00000100u;
}
void SSL_GeometryCameraCalibration::clear_q3() {
  q3_ = 0;
  clear_has_q3();
}
float SSL_GeometryCameraCalibration::q3() const {
  // @@protoc_insertion_point(field_get:SSL_GeometryCameraCalibration.q3)
  return q3_;
}
void SSL_GeometryCameraCalibration::set_q3(float value) {
  set_has_q3();
  q3_ = value;
  // @@protoc_insertion_point(field_set:SSL_GeometryCameraCalibration.q3)
}

// required float tx = 10;
bool SSL_GeometryCameraCalibration::has_tx() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
void SSL_GeometryCameraCalibration::set_has_tx() {
  _has_bits_[0] |= 0x00000200u;
}
void SSL_GeometryCameraCalibration::clear_has_tx() {
  _has_bits_[0] &= ~0x00000200u;
}
void SSL_GeometryCameraCalibration::clear_tx() {
  tx_ = 0;
  clear_has_tx();
}
float SSL_GeometryCameraCalibration::tx() const {
  // @@protoc_insertion_point(field_get:SSL_GeometryCameraCalibration.tx)
  return tx_;
}
void SSL_GeometryCameraCalibration::set_tx(float value) {
  set_has_tx();
  tx_ = value;
  // @@protoc_insertion_point(field_set:SSL_GeometryCameraCalibration.tx)
}

// required float ty = 11;
bool SSL_GeometryCameraCalibration::has_ty() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
void SSL_GeometryCameraCalibration::set_has_ty() {
  _has_bits_[0] |= 0x00000400u;
}
void SSL_GeometryCameraCalibration::clear_has_ty() {
  _has_bits_[0] &= ~0x00000400u;
}
void SSL_GeometryCameraCalibration::clear_ty() {
  ty_ = 0;
  clear_has_ty();
}
float SSL_GeometryCameraCalibration::ty() const {
  // @@protoc_insertion_point(field_get:SSL_GeometryCameraCalibration.ty)
  return ty_;
}
void SSL_GeometryCameraCalibration::set_ty(float value) {
  set_has_ty();
  ty_ = value;
  // @@protoc_insertion_point(field_set:SSL_GeometryCameraCalibration.ty)
}

// required float tz = 12;
bool SSL_GeometryCameraCalibration::has_tz() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
void SSL_GeometryCameraCalibration::set_has_tz() {
  _has_bits_[0] |= 0x00000800u;
}
void SSL_GeometryCameraCalibration::clear_has_tz() {
  _has_bits_[0] &= ~0x00000800u;
}
void SSL_GeometryCameraCalibration::clear_tz() {
  tz_ = 0;
  clear_has_tz();
}
float SSL_GeometryCameraCalibration::tz() const {
  // @@protoc_insertion_point(field_get:SSL_GeometryCameraCalibration.tz)
  return tz_;
}
void SSL_GeometryCameraCalibration::set_tz(float value) {
  set_has_tz();
  tz_ = value;
  // @@protoc_insertion_point(field_set:SSL_GeometryCameraCalibration.tz)
}

// optional float derived_camera_world_tx = 13;
bool SSL_GeometryCameraCalibration::has_derived_camera_world_tx() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
void SSL_GeometryCameraCalibration::set_has_derived_camera_world_tx() {
  _has_bits_[0] |= 0x00001000u;
}
void SSL_GeometryCameraCalibration::clear_has_derived_camera_world_tx() {
  _has_bits_[0] &= ~0x00001000u;
}
void SSL_GeometryCameraCalibration::clear_derived_camera_world_tx() {
  derived_camera_world_tx_ = 0;
  clear_has_derived_camera_world_tx();
}
float SSL_GeometryCameraCalibration::derived_camera_world_tx() const {
  // @@protoc_insertion_point(field_get:SSL_GeometryCameraCalibration.derived_camera_world_tx)
  return derived_camera_world_tx_;
}
void SSL_GeometryCameraCalibration::set_derived_camera_world_tx(float value) {
  set_has_derived_camera_world_tx();
  derived_camera_world_tx_ = value;
  // @@protoc_insertion_point(field_set:SSL_GeometryCameraCalibration.derived_camera_world_tx)
}

// optional float derived_camera_world_ty = 14;
bool SSL_GeometryCameraCalibration::has_derived_camera_world_ty() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
void SSL_GeometryCameraCalibration::set_has_derived_camera_world_ty() {
  _has_bits_[0] |= 0x00002000u;
}
void SSL_GeometryCameraCalibration::clear_has_derived_camera_world_ty() {
  _has_bits_[0] &= ~0x00002000u;
}
void SSL_GeometryCameraCalibration::clear_derived_camera_world_ty() {
  derived_camera_world_ty_ = 0;
  clear_has_derived_camera_world_ty();
}
float SSL_GeometryCameraCalibration::derived_camera_world_ty() const {
  // @@protoc_insertion_point(field_get:SSL_GeometryCameraCalibration.derived_camera_world_ty)
  return derived_camera_world_ty_;
}
void SSL_GeometryCameraCalibration::set_derived_camera_world_ty(float value) {
  set_has_derived_camera_world_ty();
  derived_camera_world_ty_ = value;
  // @@protoc_insertion_point(field_set:SSL_GeometryCameraCalibration.derived_camera_world_ty)
}

// optional float derived_camera_world_tz = 15;
bool SSL_GeometryCameraCalibration::has_derived_camera_world_tz() const {
  return (_has_bits_[0] & 0x00004000u) != 0;
}
void SSL_GeometryCameraCalibration::set_has_derived_camera_world_tz() {
  _has_bits_[0] |= 0x00004000u;
}
void SSL_GeometryCameraCalibration::clear_has_derived_camera_world_tz() {
  _has_bits_[0] &= ~0x00004000u;
}
void SSL_GeometryCameraCalibration::clear_derived_camera_world_tz() {
  derived_camera_world_tz_ = 0;
  clear_has_derived_camera_world_tz();
}
float SSL_GeometryCameraCalibration::derived_camera_world_tz() const {
  // @@protoc_insertion_point(field_get:SSL_GeometryCameraCalibration.derived_camera_world_tz)
  return derived_camera_world_tz_;
}
void SSL_GeometryCameraCalibration::set_derived_camera_world_tz(float value) {
  set_has_derived_camera_world_tz();
  derived_camera_world_tz_ = value;
  // @@protoc_insertion_point(field_set:SSL_GeometryCameraCalibration.derived_camera_world_tz)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int SSL_GeometryData::kFieldFieldNumber;
const int SSL_GeometryData::kCalibFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SSL_GeometryData::SSL_GeometryData()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_InitDefaults_messages_5frobocup_5fssl_5fgeometry_2eproto();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:SSL_GeometryData)
}
SSL_GeometryData::SSL_GeometryData(const SSL_GeometryData& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0),
      calib_(from.calib_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_field()) {
    field_ = new ::SSL_GeometryFieldSize(*from.field_);
  } else {
    field_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:SSL_GeometryData)
}

void SSL_GeometryData::SharedCtor() {
  _cached_size_ = 0;
  field_ = NULL;
}

SSL_GeometryData::~SSL_GeometryData() {
  // @@protoc_insertion_point(destructor:SSL_GeometryData)
  SharedDtor();
}

void SSL_GeometryData::SharedDtor() {
  if (this != internal_default_instance()) {
    delete field_;
  }
}

void SSL_GeometryData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SSL_GeometryData::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return file_level_metadata[2].descriptor;
}

const SSL_GeometryData& SSL_GeometryData::default_instance() {
  protobuf_InitDefaults_messages_5frobocup_5fssl_5fgeometry_2eproto();
  return *internal_default_instance();
}

SSL_GeometryData* SSL_GeometryData::New(::google::protobuf::Arena* arena) const {
  SSL_GeometryData* n = new SSL_GeometryData;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void SSL_GeometryData::Clear() {
// @@protoc_insertion_point(message_clear_start:SSL_GeometryData)
  calib_.Clear();
  if (has_field()) {
    GOOGLE_DCHECK(field_ != NULL);
    field_->::SSL_GeometryFieldSize::Clear();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool SSL_GeometryData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:SSL_GeometryData)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .SSL_GeometryFieldSize field = 1;
      case 1: {
        if (tag == 10u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_field()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .SSL_GeometryCameraCalibration calib = 2;
      case 2: {
        if (tag == 18u) {
          DO_(input->IncrementRecursionDepth());
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_calib()));
        } else {
          goto handle_unusual;
        }
        input->UnsafeDecrementRecursionDepth();
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:SSL_GeometryData)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:SSL_GeometryData)
  return false;
#undef DO_
}

void SSL_GeometryData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:SSL_GeometryData)
  // required .SSL_GeometryFieldSize field = 1;
  if (has_field()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->field_, output);
  }

  // repeated .SSL_GeometryCameraCalibration calib = 2;
  for (unsigned int i = 0, n = this->calib_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->calib(i), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:SSL_GeometryData)
}

::google::protobuf::uint8* SSL_GeometryData::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:SSL_GeometryData)
  // required .SSL_GeometryFieldSize field = 1;
  if (has_field()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->field_, false, target);
  }

  // repeated .SSL_GeometryCameraCalibration calib = 2;
  for (unsigned int i = 0, n = this->calib_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, this->calib(i), false, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:SSL_GeometryData)
  return target;
}

size_t SSL_GeometryData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:SSL_GeometryData)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  // required .SSL_GeometryFieldSize field = 1;
  if (has_field()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->field_);
  }
  // repeated .SSL_GeometryCameraCalibration calib = 2;
  {
    unsigned int count = this->calib_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->calib(i));
    }
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SSL_GeometryData::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:SSL_GeometryData)
  GOOGLE_DCHECK_NE(&from, this);
  const SSL_GeometryData* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const SSL_GeometryData>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:SSL_GeometryData)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:SSL_GeometryData)
    MergeFrom(*source);
  }
}

void SSL_GeometryData::MergeFrom(const SSL_GeometryData& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:SSL_GeometryData)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  calib_.MergeFrom(from.calib_);
  if (from.has_field()) {
    mutable_field()->::SSL_GeometryFieldSize::MergeFrom(from.field());
  }
}

void SSL_GeometryData::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:SSL_GeometryData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SSL_GeometryData::CopyFrom(const SSL_GeometryData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:SSL_GeometryData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SSL_GeometryData::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  if (!::google::protobuf::internal::AllAreInitialized(this->calib())) return false;
  if (has_field()) {
    if (!this->field_->IsInitialized()) return false;
  }
  return true;
}

void SSL_GeometryData::Swap(SSL_GeometryData* other) {
  if (other == this) return;
  InternalSwap(other);
}
void SSL_GeometryData::InternalSwap(SSL_GeometryData* other) {
  calib_.UnsafeArenaSwap(&other->calib_);
  std::swap(field_, other->field_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata SSL_GeometryData::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  return file_level_metadata[2];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// SSL_GeometryData

// required .SSL_GeometryFieldSize field = 1;
bool SSL_GeometryData::has_field() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void SSL_GeometryData::set_has_field() {
  _has_bits_[0] |= 0x00000001u;
}
void SSL_GeometryData::clear_has_field() {
  _has_bits_[0] &= ~0x00000001u;
}
void SSL_GeometryData::clear_field() {
  if (field_ != NULL) field_->::SSL_GeometryFieldSize::Clear();
  clear_has_field();
}
const ::SSL_GeometryFieldSize& SSL_GeometryData::field() const {
  // @@protoc_insertion_point(field_get:SSL_GeometryData.field)
  return field_ != NULL ? *field_
                         : *::SSL_GeometryFieldSize::internal_default_instance();
}
::SSL_GeometryFieldSize* SSL_GeometryData::mutable_field() {
  set_has_field();
  if (field_ == NULL) {
    field_ = new ::SSL_GeometryFieldSize;
  }
  // @@protoc_insertion_point(field_mutable:SSL_GeometryData.field)
  return field_;
}
::SSL_GeometryFieldSize* SSL_GeometryData::release_field() {
  // @@protoc_insertion_point(field_release:SSL_GeometryData.field)
  clear_has_field();
  ::SSL_GeometryFieldSize* temp = field_;
  field_ = NULL;
  return temp;
}
void SSL_GeometryData::set_allocated_field(::SSL_GeometryFieldSize* field) {
  delete field_;
  field_ = field;
  if (field) {
    set_has_field();
  } else {
    clear_has_field();
  }
  // @@protoc_insertion_point(field_set_allocated:SSL_GeometryData.field)
}

// repeated .SSL_GeometryCameraCalibration calib = 2;
int SSL_GeometryData::calib_size() const {
  return calib_.size();
}
void SSL_GeometryData::clear_calib() {
  calib_.Clear();
}
const ::SSL_GeometryCameraCalibration& SSL_GeometryData::calib(int index) const {
  // @@protoc_insertion_point(field_get:SSL_GeometryData.calib)
  return calib_.Get(index);
}
::SSL_GeometryCameraCalibration* SSL_GeometryData::mutable_calib(int index) {
  // @@protoc_insertion_point(field_mutable:SSL_GeometryData.calib)
  return calib_.Mutable(index);
}
::SSL_GeometryCameraCalibration* SSL_GeometryData::add_calib() {
  // @@protoc_insertion_point(field_add:SSL_GeometryData.calib)
  return calib_.Add();
}
::google::protobuf::RepeatedPtrField< ::SSL_GeometryCameraCalibration >*
SSL_GeometryData::mutable_calib() {
  // @@protoc_insertion_point(field_mutable_list:SSL_GeometryData.calib)
  return &calib_;
}
const ::google::protobuf::RepeatedPtrField< ::SSL_GeometryCameraCalibration >&
SSL_GeometryData::calib() const {
  // @@protoc_insertion_point(field_list:SSL_GeometryData.calib)
  return calib_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

// @@protoc_insertion_point(global_scope)
