// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: sslDebug_Data.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "sslDebug_Data.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
class sslDebug_DataDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<sslDebug_Data> {};
sslDebug_DataDefaultTypeInternal _sslDebug_Data_default_instance_;
class Debug_CircleDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<Debug_Circle> {};
Debug_CircleDefaultTypeInternal _Debug_Circle_default_instance_;
class Debug_LineDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<Debug_Line> {};
Debug_LineDefaultTypeInternal _Debug_Line_default_instance_;
class Debug_AdjustBotDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<Debug_AdjustBot> {};
Debug_AdjustBotDefaultTypeInternal _Debug_AdjustBot_default_instance_;
class Debug_AdjustBallDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<Debug_AdjustBall> {};
Debug_AdjustBallDefaultTypeInternal _Debug_AdjustBall_default_instance_;

namespace {

::google::protobuf::Metadata file_level_metadata[5];

}  // namespace


const ::google::protobuf::uint32* protobuf_Offsets_sslDebug_5fData_2eproto() GOOGLE_ATTRIBUTE_COLD;
const ::google::protobuf::uint32* protobuf_Offsets_sslDebug_5fData_2eproto() {
  static const ::google::protobuf::uint32 offsets[] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(sslDebug_Data, _has_bits_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(sslDebug_Data, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(sslDebug_Data, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(sslDebug_Data, circle_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(sslDebug_Data, line_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(sslDebug_Data, botpos_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(sslDebug_Data, ballpos_),
    0,
    1,
    2,
    3,
    4,
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Debug_Circle, _has_bits_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Debug_Circle, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Debug_Circle, x_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Debug_Circle, y_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Debug_Circle, radius_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Debug_Circle, color_),
    0,
    1,
    2,
    3,
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Debug_Line, _has_bits_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Debug_Line, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Debug_Line, x1_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Debug_Line, y1_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Debug_Line, x2_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Debug_Line, y2_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Debug_Line, color_),
    0,
    1,
    2,
    3,
    4,
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Debug_AdjustBot, _has_bits_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Debug_AdjustBot, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Debug_AdjustBot, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Debug_AdjustBot, x_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Debug_AdjustBot, y_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Debug_AdjustBot, dir_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Debug_AdjustBot, vx_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Debug_AdjustBot, vy_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Debug_AdjustBot, vz_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Debug_AdjustBot, team_),
    0,
    1,
    2,
    3,
    4,
    5,
    6,
    7,
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Debug_AdjustBall, _has_bits_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Debug_AdjustBall, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Debug_AdjustBall, x_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Debug_AdjustBall, y_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Debug_AdjustBall, vx_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Debug_AdjustBall, vy_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Debug_AdjustBall, vz_),
    0,
    1,
    2,
    3,
    4,
  };
  return offsets;
}

static const ::google::protobuf::internal::MigrationSchema schemas[] = {
  { 0, 9, sizeof(sslDebug_Data)},
  { 14, 22, sizeof(Debug_Circle)},
  { 26, 35, sizeof(Debug_Line)},
  { 40, 52, sizeof(Debug_AdjustBot)},
  { 60, 69, sizeof(Debug_AdjustBall)},
};

static const ::google::protobuf::internal::DefaultInstanceData file_default_instances[] = {
  {reinterpret_cast<const ::google::protobuf::Message*>(&_sslDebug_Data_default_instance_), NULL},
  {reinterpret_cast<const ::google::protobuf::Message*>(&_Debug_Circle_default_instance_), NULL},
  {reinterpret_cast<const ::google::protobuf::Message*>(&_Debug_Line_default_instance_), NULL},
  {reinterpret_cast<const ::google::protobuf::Message*>(&_Debug_AdjustBot_default_instance_), NULL},
  {reinterpret_cast<const ::google::protobuf::Message*>(&_Debug_AdjustBall_default_instance_), NULL},
};

namespace {

void protobuf_AssignDescriptors() {
  protobuf_AddDesc_sslDebug_5fData_2eproto();
  ::google::protobuf::MessageFactory* factory = NULL;
  AssignDescriptors(
      "sslDebug_Data.proto", schemas, file_default_instances, protobuf_Offsets_sslDebug_5fData_2eproto(), factory,
      file_level_metadata, NULL, NULL);
}

void protobuf_AssignDescriptorsOnce() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &protobuf_AssignDescriptors);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::internal::RegisterAllTypes(file_level_metadata, 5);
}

}  // namespace

void protobuf_ShutdownFile_sslDebug_5fData_2eproto() {
  _sslDebug_Data_default_instance_.Shutdown();
  delete file_level_metadata[0].reflection;
  _Debug_Circle_default_instance_.Shutdown();
  delete file_level_metadata[1].reflection;
  _Debug_Line_default_instance_.Shutdown();
  delete file_level_metadata[2].reflection;
  _Debug_AdjustBot_default_instance_.Shutdown();
  delete file_level_metadata[3].reflection;
  _Debug_AdjustBall_default_instance_.Shutdown();
  delete file_level_metadata[4].reflection;
}

void protobuf_InitDefaults_sslDebug_5fData_2eproto_impl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::internal::InitProtobufDefaults();
  _sslDebug_Data_default_instance_.DefaultConstruct();
  _Debug_Circle_default_instance_.DefaultConstruct();
  _Debug_Line_default_instance_.DefaultConstruct();
  _Debug_AdjustBot_default_instance_.DefaultConstruct();
  _Debug_AdjustBall_default_instance_.DefaultConstruct();
}

void protobuf_InitDefaults_sslDebug_5fData_2eproto() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &protobuf_InitDefaults_sslDebug_5fData_2eproto_impl);
}
void protobuf_AddDesc_sslDebug_5fData_2eproto_impl() {
  protobuf_InitDefaults_sslDebug_5fData_2eproto();
  static const char descriptor[] = {
      "\n\023sslDebug_Data.proto\"\233\001\n\rsslDebug_Data\022"
      "\n\n\002id\030\001 \002(\t\022\035\n\006circle\030\002 \003(\0132\r.Debug_Circ"
      "le\022\031\n\004line\030\003 \003(\0132\013.Debug_Line\022 \n\006botpos\030"
      "\004 \003(\0132\020.Debug_AdjustBot\022\"\n\007ballpos\030\005 \003(\013"
      "2\021.Debug_AdjustBall\"C\n\014Debug_Circle\022\t\n\001x"
      "\030\001 \002(\005\022\t\n\001y\030\002 \002(\005\022\016\n\006radius\030\003 \002(\005\022\r\n\005col"
      "or\030\004 \002(\002\"K\n\nDebug_Line\022\n\n\002x1\030\001 \002(\005\022\n\n\002y1"
      "\030\002 \002(\005\022\n\n\002x2\030\003 \002(\005\022\n\n\002y2\030\004 \002(\005\022\r\n\005color\030"
      "\005 \002(\002\"r\n\017Debug_AdjustBot\022\n\n\002id\030\001 \002(\r\022\t\n\001"
      "x\030\002 \002(\005\022\t\n\001y\030\003 \002(\005\022\013\n\003dir\030\004 \002(\002\022\n\n\002vx\030\005 "
      "\002(\005\022\n\n\002vy\030\006 \002(\005\022\n\n\002vz\030\007 \002(\005\022\014\n\004team\030\010 \002("
      "\r\"L\n\020Debug_AdjustBall\022\t\n\001x\030\001 \002(\005\022\t\n\001y\030\002 "
      "\002(\005\022\n\n\002vx\030\003 \002(\005\022\n\n\002vy\030\004 \002(\005\022\n\n\002vz\030\005 \002(\r"
  };
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
      descriptor, 519);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "sslDebug_Data.proto", &protobuf_RegisterTypes);
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_sslDebug_5fData_2eproto);
}

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AddDesc_sslDebug_5fData_2eproto_once_);
void protobuf_AddDesc_sslDebug_5fData_2eproto() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AddDesc_sslDebug_5fData_2eproto_once_,
                 &protobuf_AddDesc_sslDebug_5fData_2eproto_impl);
}
// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_sslDebug_5fData_2eproto {
  StaticDescriptorInitializer_sslDebug_5fData_2eproto() {
    protobuf_AddDesc_sslDebug_5fData_2eproto();
  }
} static_descriptor_initializer_sslDebug_5fData_2eproto_;

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int sslDebug_Data::kIdFieldNumber;
const int sslDebug_Data::kCircleFieldNumber;
const int sslDebug_Data::kLineFieldNumber;
const int sslDebug_Data::kBotposFieldNumber;
const int sslDebug_Data::kBallposFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

sslDebug_Data::sslDebug_Data()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_InitDefaults_sslDebug_5fData_2eproto();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:sslDebug_Data)
}
sslDebug_Data::sslDebug_Data(const sslDebug_Data& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0),
      circle_(from.circle_),
      line_(from.line_),
      botpos_(from.botpos_),
      ballpos_(from.ballpos_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_id()) {
    id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.id_);
  }
  // @@protoc_insertion_point(copy_constructor:sslDebug_Data)
}

void sslDebug_Data::SharedCtor() {
  _cached_size_ = 0;
  id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

sslDebug_Data::~sslDebug_Data() {
  // @@protoc_insertion_point(destructor:sslDebug_Data)
  SharedDtor();
}

void sslDebug_Data::SharedDtor() {
  id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void sslDebug_Data::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* sslDebug_Data::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return file_level_metadata[0].descriptor;
}

const sslDebug_Data& sslDebug_Data::default_instance() {
  protobuf_InitDefaults_sslDebug_5fData_2eproto();
  return *internal_default_instance();
}

sslDebug_Data* sslDebug_Data::New(::google::protobuf::Arena* arena) const {
  sslDebug_Data* n = new sslDebug_Data;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void sslDebug_Data::Clear() {
// @@protoc_insertion_point(message_clear_start:sslDebug_Data)
  circle_.Clear();
  line_.Clear();
  botpos_.Clear();
  ballpos_.Clear();
  if (has_id()) {
    GOOGLE_DCHECK(!id_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
    (*id_.UnsafeRawStringPointer())->clear();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool sslDebug_Data::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:sslDebug_Data)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string id = 1;
      case 1: {
        if (tag == 10u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->id().data(), this->id().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "sslDebug_Data.id");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .Debug_Circle circle = 2;
      case 2: {
        if (tag == 18u) {
          DO_(input->IncrementRecursionDepth());
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_circle()));
        } else {
          goto handle_unusual;
        }
        input->UnsafeDecrementRecursionDepth();
        break;
      }

      // repeated .Debug_Line line = 3;
      case 3: {
        if (tag == 26u) {
          DO_(input->IncrementRecursionDepth());
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_line()));
        } else {
          goto handle_unusual;
        }
        input->UnsafeDecrementRecursionDepth();
        break;
      }

      // repeated .Debug_AdjustBot botpos = 4;
      case 4: {
        if (tag == 34u) {
          DO_(input->IncrementRecursionDepth());
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_botpos()));
        } else {
          goto handle_unusual;
        }
        input->UnsafeDecrementRecursionDepth();
        break;
      }

      // repeated .Debug_AdjustBall ballpos = 5;
      case 5: {
        if (tag == 42u) {
          DO_(input->IncrementRecursionDepth());
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_ballpos()));
        } else {
          goto handle_unusual;
        }
        input->UnsafeDecrementRecursionDepth();
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:sslDebug_Data)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:sslDebug_Data)
  return false;
#undef DO_
}

void sslDebug_Data::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:sslDebug_Data)
  // required string id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->id().data(), this->id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "sslDebug_Data.id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->id(), output);
  }

  // repeated .Debug_Circle circle = 2;
  for (unsigned int i = 0, n = this->circle_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->circle(i), output);
  }

  // repeated .Debug_Line line = 3;
  for (unsigned int i = 0, n = this->line_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->line(i), output);
  }

  // repeated .Debug_AdjustBot botpos = 4;
  for (unsigned int i = 0, n = this->botpos_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->botpos(i), output);
  }

  // repeated .Debug_AdjustBall ballpos = 5;
  for (unsigned int i = 0, n = this->ballpos_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->ballpos(i), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:sslDebug_Data)
}

::google::protobuf::uint8* sslDebug_Data::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:sslDebug_Data)
  // required string id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->id().data(), this->id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "sslDebug_Data.id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->id(), target);
  }

  // repeated .Debug_Circle circle = 2;
  for (unsigned int i = 0, n = this->circle_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, this->circle(i), false, target);
  }

  // repeated .Debug_Line line = 3;
  for (unsigned int i = 0, n = this->line_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        3, this->line(i), false, target);
  }

  // repeated .Debug_AdjustBot botpos = 4;
  for (unsigned int i = 0, n = this->botpos_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        4, this->botpos(i), false, target);
  }

  // repeated .Debug_AdjustBall ballpos = 5;
  for (unsigned int i = 0, n = this->ballpos_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        5, this->ballpos(i), false, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:sslDebug_Data)
  return target;
}

size_t sslDebug_Data::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:sslDebug_Data)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  // required string id = 1;
  if (has_id()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->id());
  }
  // repeated .Debug_Circle circle = 2;
  {
    unsigned int count = this->circle_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->circle(i));
    }
  }

  // repeated .Debug_Line line = 3;
  {
    unsigned int count = this->line_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->line(i));
    }
  }

  // repeated .Debug_AdjustBot botpos = 4;
  {
    unsigned int count = this->botpos_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->botpos(i));
    }
  }

  // repeated .Debug_AdjustBall ballpos = 5;
  {
    unsigned int count = this->ballpos_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->ballpos(i));
    }
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void sslDebug_Data::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:sslDebug_Data)
  GOOGLE_DCHECK_NE(&from, this);
  const sslDebug_Data* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const sslDebug_Data>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:sslDebug_Data)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:sslDebug_Data)
    MergeFrom(*source);
  }
}

void sslDebug_Data::MergeFrom(const sslDebug_Data& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:sslDebug_Data)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  circle_.MergeFrom(from.circle_);
  line_.MergeFrom(from.line_);
  botpos_.MergeFrom(from.botpos_);
  ballpos_.MergeFrom(from.ballpos_);
  if (from.has_id()) {
    set_has_id();
    id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.id_);
  }
}

void sslDebug_Data::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:sslDebug_Data)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void sslDebug_Data::CopyFrom(const sslDebug_Data& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:sslDebug_Data)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool sslDebug_Data::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  if (!::google::protobuf::internal::AllAreInitialized(this->circle())) return false;
  if (!::google::protobuf::internal::AllAreInitialized(this->line())) return false;
  if (!::google::protobuf::internal::AllAreInitialized(this->botpos())) return false;
  if (!::google::protobuf::internal::AllAreInitialized(this->ballpos())) return false;
  return true;
}

void sslDebug_Data::Swap(sslDebug_Data* other) {
  if (other == this) return;
  InternalSwap(other);
}
void sslDebug_Data::InternalSwap(sslDebug_Data* other) {
  circle_.UnsafeArenaSwap(&other->circle_);
  line_.UnsafeArenaSwap(&other->line_);
  botpos_.UnsafeArenaSwap(&other->botpos_);
  ballpos_.UnsafeArenaSwap(&other->ballpos_);
  id_.Swap(&other->id_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata sslDebug_Data::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  return file_level_metadata[0];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// sslDebug_Data

// required string id = 1;
bool sslDebug_Data::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void sslDebug_Data::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
void sslDebug_Data::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
void sslDebug_Data::clear_id() {
  id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_id();
}
const ::std::string& sslDebug_Data::id() const {
  // @@protoc_insertion_point(field_get:sslDebug_Data.id)
  return id_.GetNoArena();
}
void sslDebug_Data::set_id(const ::std::string& value) {
  set_has_id();
  id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:sslDebug_Data.id)
}
#if LANG_CXX11
void sslDebug_Data::set_id(::std::string&& value) {
  set_has_id();
  id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:sslDebug_Data.id)
}
#endif
void sslDebug_Data::set_id(const char* value) {
  set_has_id();
  id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:sslDebug_Data.id)
}
void sslDebug_Data::set_id(const char* value, size_t size) {
  set_has_id();
  id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:sslDebug_Data.id)
}
::std::string* sslDebug_Data::mutable_id() {
  set_has_id();
  // @@protoc_insertion_point(field_mutable:sslDebug_Data.id)
  return id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* sslDebug_Data::release_id() {
  // @@protoc_insertion_point(field_release:sslDebug_Data.id)
  clear_has_id();
  return id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void sslDebug_Data::set_allocated_id(::std::string* id) {
  if (id != NULL) {
    set_has_id();
  } else {
    clear_has_id();
  }
  id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), id);
  // @@protoc_insertion_point(field_set_allocated:sslDebug_Data.id)
}

// repeated .Debug_Circle circle = 2;
int sslDebug_Data::circle_size() const {
  return circle_.size();
}
void sslDebug_Data::clear_circle() {
  circle_.Clear();
}
const ::Debug_Circle& sslDebug_Data::circle(int index) const {
  // @@protoc_insertion_point(field_get:sslDebug_Data.circle)
  return circle_.Get(index);
}
::Debug_Circle* sslDebug_Data::mutable_circle(int index) {
  // @@protoc_insertion_point(field_mutable:sslDebug_Data.circle)
  return circle_.Mutable(index);
}
::Debug_Circle* sslDebug_Data::add_circle() {
  // @@protoc_insertion_point(field_add:sslDebug_Data.circle)
  return circle_.Add();
}
::google::protobuf::RepeatedPtrField< ::Debug_Circle >*
sslDebug_Data::mutable_circle() {
  // @@protoc_insertion_point(field_mutable_list:sslDebug_Data.circle)
  return &circle_;
}
const ::google::protobuf::RepeatedPtrField< ::Debug_Circle >&
sslDebug_Data::circle() const {
  // @@protoc_insertion_point(field_list:sslDebug_Data.circle)
  return circle_;
}

// repeated .Debug_Line line = 3;
int sslDebug_Data::line_size() const {
  return line_.size();
}
void sslDebug_Data::clear_line() {
  line_.Clear();
}
const ::Debug_Line& sslDebug_Data::line(int index) const {
  // @@protoc_insertion_point(field_get:sslDebug_Data.line)
  return line_.Get(index);
}
::Debug_Line* sslDebug_Data::mutable_line(int index) {
  // @@protoc_insertion_point(field_mutable:sslDebug_Data.line)
  return line_.Mutable(index);
}
::Debug_Line* sslDebug_Data::add_line() {
  // @@protoc_insertion_point(field_add:sslDebug_Data.line)
  return line_.Add();
}
::google::protobuf::RepeatedPtrField< ::Debug_Line >*
sslDebug_Data::mutable_line() {
  // @@protoc_insertion_point(field_mutable_list:sslDebug_Data.line)
  return &line_;
}
const ::google::protobuf::RepeatedPtrField< ::Debug_Line >&
sslDebug_Data::line() const {
  // @@protoc_insertion_point(field_list:sslDebug_Data.line)
  return line_;
}

// repeated .Debug_AdjustBot botpos = 4;
int sslDebug_Data::botpos_size() const {
  return botpos_.size();
}
void sslDebug_Data::clear_botpos() {
  botpos_.Clear();
}
const ::Debug_AdjustBot& sslDebug_Data::botpos(int index) const {
  // @@protoc_insertion_point(field_get:sslDebug_Data.botpos)
  return botpos_.Get(index);
}
::Debug_AdjustBot* sslDebug_Data::mutable_botpos(int index) {
  // @@protoc_insertion_point(field_mutable:sslDebug_Data.botpos)
  return botpos_.Mutable(index);
}
::Debug_AdjustBot* sslDebug_Data::add_botpos() {
  // @@protoc_insertion_point(field_add:sslDebug_Data.botpos)
  return botpos_.Add();
}
::google::protobuf::RepeatedPtrField< ::Debug_AdjustBot >*
sslDebug_Data::mutable_botpos() {
  // @@protoc_insertion_point(field_mutable_list:sslDebug_Data.botpos)
  return &botpos_;
}
const ::google::protobuf::RepeatedPtrField< ::Debug_AdjustBot >&
sslDebug_Data::botpos() const {
  // @@protoc_insertion_point(field_list:sslDebug_Data.botpos)
  return botpos_;
}

// repeated .Debug_AdjustBall ballpos = 5;
int sslDebug_Data::ballpos_size() const {
  return ballpos_.size();
}
void sslDebug_Data::clear_ballpos() {
  ballpos_.Clear();
}
const ::Debug_AdjustBall& sslDebug_Data::ballpos(int index) const {
  // @@protoc_insertion_point(field_get:sslDebug_Data.ballpos)
  return ballpos_.Get(index);
}
::Debug_AdjustBall* sslDebug_Data::mutable_ballpos(int index) {
  // @@protoc_insertion_point(field_mutable:sslDebug_Data.ballpos)
  return ballpos_.Mutable(index);
}
::Debug_AdjustBall* sslDebug_Data::add_ballpos() {
  // @@protoc_insertion_point(field_add:sslDebug_Data.ballpos)
  return ballpos_.Add();
}
::google::protobuf::RepeatedPtrField< ::Debug_AdjustBall >*
sslDebug_Data::mutable_ballpos() {
  // @@protoc_insertion_point(field_mutable_list:sslDebug_Data.ballpos)
  return &ballpos_;
}
const ::google::protobuf::RepeatedPtrField< ::Debug_AdjustBall >&
sslDebug_Data::ballpos() const {
  // @@protoc_insertion_point(field_list:sslDebug_Data.ballpos)
  return ballpos_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Debug_Circle::kXFieldNumber;
const int Debug_Circle::kYFieldNumber;
const int Debug_Circle::kRadiusFieldNumber;
const int Debug_Circle::kColorFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Debug_Circle::Debug_Circle()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_InitDefaults_sslDebug_5fData_2eproto();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:Debug_Circle)
}
Debug_Circle::Debug_Circle(const Debug_Circle& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&x_, &from.x_,
    reinterpret_cast<char*>(&color_) -
    reinterpret_cast<char*>(&x_) + sizeof(color_));
  // @@protoc_insertion_point(copy_constructor:Debug_Circle)
}

void Debug_Circle::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&x_, 0, reinterpret_cast<char*>(&color_) -
    reinterpret_cast<char*>(&x_) + sizeof(color_));
}

Debug_Circle::~Debug_Circle() {
  // @@protoc_insertion_point(destructor:Debug_Circle)
  SharedDtor();
}

void Debug_Circle::SharedDtor() {
}

void Debug_Circle::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Debug_Circle::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return file_level_metadata[1].descriptor;
}

const Debug_Circle& Debug_Circle::default_instance() {
  protobuf_InitDefaults_sslDebug_5fData_2eproto();
  return *internal_default_instance();
}

Debug_Circle* Debug_Circle::New(::google::protobuf::Arena* arena) const {
  Debug_Circle* n = new Debug_Circle;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Debug_Circle::Clear() {
// @@protoc_insertion_point(message_clear_start:Debug_Circle)
  if (_has_bits_[0 / 32] & 15u) {
    ::memset(&x_, 0, reinterpret_cast<char*>(&color_) -
      reinterpret_cast<char*>(&x_) + sizeof(color_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool Debug_Circle::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Debug_Circle)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 x = 1;
      case 1: {
        if (tag == 8u) {
          set_has_x();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &x_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required int32 y = 2;
      case 2: {
        if (tag == 16u) {
          set_has_y();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &y_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required int32 radius = 3;
      case 3: {
        if (tag == 24u) {
          set_has_radius();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &radius_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required float color = 4;
      case 4: {
        if (tag == 37u) {
          set_has_color();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &color_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Debug_Circle)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Debug_Circle)
  return false;
#undef DO_
}

void Debug_Circle::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Debug_Circle)
  // required int32 x = 1;
  if (has_x()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->x(), output);
  }

  // required int32 y = 2;
  if (has_y()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->y(), output);
  }

  // required int32 radius = 3;
  if (has_radius()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->radius(), output);
  }

  // required float color = 4;
  if (has_color()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(4, this->color(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Debug_Circle)
}

::google::protobuf::uint8* Debug_Circle::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:Debug_Circle)
  // required int32 x = 1;
  if (has_x()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->x(), target);
  }

  // required int32 y = 2;
  if (has_y()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->y(), target);
  }

  // required int32 radius = 3;
  if (has_radius()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->radius(), target);
  }

  // required float color = 4;
  if (has_color()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(4, this->color(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Debug_Circle)
  return target;
}

size_t Debug_Circle::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:Debug_Circle)
  size_t total_size = 0;

  if (has_x()) {
    // required int32 x = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->x());
  }

  if (has_y()) {
    // required int32 y = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->y());
  }

  if (has_radius()) {
    // required int32 radius = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->radius());
  }

  if (has_color()) {
    // required float color = 4;
    total_size += 1 + 4;
  }

  return total_size;
}
size_t Debug_Circle::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Debug_Circle)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (((_has_bits_[0] & 0x0000000f) ^ 0x0000000f) == 0) {  // All required fields are present.
    // required int32 x = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->x());

    // required int32 y = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->y());

    // required int32 radius = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->radius());

    // required float color = 4;
    total_size += 1 + 4;

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Debug_Circle::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Debug_Circle)
  GOOGLE_DCHECK_NE(&from, this);
  const Debug_Circle* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Debug_Circle>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Debug_Circle)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Debug_Circle)
    MergeFrom(*source);
  }
}

void Debug_Circle::MergeFrom(const Debug_Circle& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Debug_Circle)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from._has_bits_[0 / 32] & 15u) {
    if (from.has_x()) {
      set_x(from.x());
    }
    if (from.has_y()) {
      set_y(from.y());
    }
    if (from.has_radius()) {
      set_radius(from.radius());
    }
    if (from.has_color()) {
      set_color(from.color());
    }
  }
}

void Debug_Circle::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Debug_Circle)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Debug_Circle::CopyFrom(const Debug_Circle& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Debug_Circle)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Debug_Circle::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000f) != 0x0000000f) return false;
  return true;
}

void Debug_Circle::Swap(Debug_Circle* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Debug_Circle::InternalSwap(Debug_Circle* other) {
  std::swap(x_, other->x_);
  std::swap(y_, other->y_);
  std::swap(radius_, other->radius_);
  std::swap(color_, other->color_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Debug_Circle::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  return file_level_metadata[1];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Debug_Circle

// required int32 x = 1;
bool Debug_Circle::has_x() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void Debug_Circle::set_has_x() {
  _has_bits_[0] |= 0x00000001u;
}
void Debug_Circle::clear_has_x() {
  _has_bits_[0] &= ~0x00000001u;
}
void Debug_Circle::clear_x() {
  x_ = 0;
  clear_has_x();
}
::google::protobuf::int32 Debug_Circle::x() const {
  // @@protoc_insertion_point(field_get:Debug_Circle.x)
  return x_;
}
void Debug_Circle::set_x(::google::protobuf::int32 value) {
  set_has_x();
  x_ = value;
  // @@protoc_insertion_point(field_set:Debug_Circle.x)
}

// required int32 y = 2;
bool Debug_Circle::has_y() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void Debug_Circle::set_has_y() {
  _has_bits_[0] |= 0x00000002u;
}
void Debug_Circle::clear_has_y() {
  _has_bits_[0] &= ~0x00000002u;
}
void Debug_Circle::clear_y() {
  y_ = 0;
  clear_has_y();
}
::google::protobuf::int32 Debug_Circle::y() const {
  // @@protoc_insertion_point(field_get:Debug_Circle.y)
  return y_;
}
void Debug_Circle::set_y(::google::protobuf::int32 value) {
  set_has_y();
  y_ = value;
  // @@protoc_insertion_point(field_set:Debug_Circle.y)
}

// required int32 radius = 3;
bool Debug_Circle::has_radius() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void Debug_Circle::set_has_radius() {
  _has_bits_[0] |= 0x00000004u;
}
void Debug_Circle::clear_has_radius() {
  _has_bits_[0] &= ~0x00000004u;
}
void Debug_Circle::clear_radius() {
  radius_ = 0;
  clear_has_radius();
}
::google::protobuf::int32 Debug_Circle::radius() const {
  // @@protoc_insertion_point(field_get:Debug_Circle.radius)
  return radius_;
}
void Debug_Circle::set_radius(::google::protobuf::int32 value) {
  set_has_radius();
  radius_ = value;
  // @@protoc_insertion_point(field_set:Debug_Circle.radius)
}

// required float color = 4;
bool Debug_Circle::has_color() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void Debug_Circle::set_has_color() {
  _has_bits_[0] |= 0x00000008u;
}
void Debug_Circle::clear_has_color() {
  _has_bits_[0] &= ~0x00000008u;
}
void Debug_Circle::clear_color() {
  color_ = 0;
  clear_has_color();
}
float Debug_Circle::color() const {
  // @@protoc_insertion_point(field_get:Debug_Circle.color)
  return color_;
}
void Debug_Circle::set_color(float value) {
  set_has_color();
  color_ = value;
  // @@protoc_insertion_point(field_set:Debug_Circle.color)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Debug_Line::kX1FieldNumber;
const int Debug_Line::kY1FieldNumber;
const int Debug_Line::kX2FieldNumber;
const int Debug_Line::kY2FieldNumber;
const int Debug_Line::kColorFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Debug_Line::Debug_Line()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_InitDefaults_sslDebug_5fData_2eproto();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:Debug_Line)
}
Debug_Line::Debug_Line(const Debug_Line& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&x1_, &from.x1_,
    reinterpret_cast<char*>(&color_) -
    reinterpret_cast<char*>(&x1_) + sizeof(color_));
  // @@protoc_insertion_point(copy_constructor:Debug_Line)
}

void Debug_Line::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&x1_, 0, reinterpret_cast<char*>(&color_) -
    reinterpret_cast<char*>(&x1_) + sizeof(color_));
}

Debug_Line::~Debug_Line() {
  // @@protoc_insertion_point(destructor:Debug_Line)
  SharedDtor();
}

void Debug_Line::SharedDtor() {
}

void Debug_Line::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Debug_Line::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return file_level_metadata[2].descriptor;
}

const Debug_Line& Debug_Line::default_instance() {
  protobuf_InitDefaults_sslDebug_5fData_2eproto();
  return *internal_default_instance();
}

Debug_Line* Debug_Line::New(::google::protobuf::Arena* arena) const {
  Debug_Line* n = new Debug_Line;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Debug_Line::Clear() {
// @@protoc_insertion_point(message_clear_start:Debug_Line)
  if (_has_bits_[0 / 32] & 31u) {
    ::memset(&x1_, 0, reinterpret_cast<char*>(&color_) -
      reinterpret_cast<char*>(&x1_) + sizeof(color_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool Debug_Line::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Debug_Line)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 x1 = 1;
      case 1: {
        if (tag == 8u) {
          set_has_x1();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &x1_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required int32 y1 = 2;
      case 2: {
        if (tag == 16u) {
          set_has_y1();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &y1_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required int32 x2 = 3;
      case 3: {
        if (tag == 24u) {
          set_has_x2();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &x2_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required int32 y2 = 4;
      case 4: {
        if (tag == 32u) {
          set_has_y2();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &y2_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required float color = 5;
      case 5: {
        if (tag == 45u) {
          set_has_color();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &color_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Debug_Line)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Debug_Line)
  return false;
#undef DO_
}

void Debug_Line::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Debug_Line)
  // required int32 x1 = 1;
  if (has_x1()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->x1(), output);
  }

  // required int32 y1 = 2;
  if (has_y1()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->y1(), output);
  }

  // required int32 x2 = 3;
  if (has_x2()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->x2(), output);
  }

  // required int32 y2 = 4;
  if (has_y2()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->y2(), output);
  }

  // required float color = 5;
  if (has_color()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(5, this->color(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Debug_Line)
}

::google::protobuf::uint8* Debug_Line::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:Debug_Line)
  // required int32 x1 = 1;
  if (has_x1()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->x1(), target);
  }

  // required int32 y1 = 2;
  if (has_y1()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->y1(), target);
  }

  // required int32 x2 = 3;
  if (has_x2()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->x2(), target);
  }

  // required int32 y2 = 4;
  if (has_y2()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->y2(), target);
  }

  // required float color = 5;
  if (has_color()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(5, this->color(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Debug_Line)
  return target;
}

size_t Debug_Line::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:Debug_Line)
  size_t total_size = 0;

  if (has_x1()) {
    // required int32 x1 = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->x1());
  }

  if (has_y1()) {
    // required int32 y1 = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->y1());
  }

  if (has_x2()) {
    // required int32 x2 = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->x2());
  }

  if (has_y2()) {
    // required int32 y2 = 4;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->y2());
  }

  if (has_color()) {
    // required float color = 5;
    total_size += 1 + 4;
  }

  return total_size;
}
size_t Debug_Line::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Debug_Line)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (((_has_bits_[0] & 0x0000001f) ^ 0x0000001f) == 0) {  // All required fields are present.
    // required int32 x1 = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->x1());

    // required int32 y1 = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->y1());

    // required int32 x2 = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->x2());

    // required int32 y2 = 4;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->y2());

    // required float color = 5;
    total_size += 1 + 4;

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Debug_Line::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Debug_Line)
  GOOGLE_DCHECK_NE(&from, this);
  const Debug_Line* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Debug_Line>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Debug_Line)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Debug_Line)
    MergeFrom(*source);
  }
}

void Debug_Line::MergeFrom(const Debug_Line& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Debug_Line)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from._has_bits_[0 / 32] & 31u) {
    if (from.has_x1()) {
      set_x1(from.x1());
    }
    if (from.has_y1()) {
      set_y1(from.y1());
    }
    if (from.has_x2()) {
      set_x2(from.x2());
    }
    if (from.has_y2()) {
      set_y2(from.y2());
    }
    if (from.has_color()) {
      set_color(from.color());
    }
  }
}

void Debug_Line::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Debug_Line)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Debug_Line::CopyFrom(const Debug_Line& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Debug_Line)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Debug_Line::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000001f) != 0x0000001f) return false;
  return true;
}

void Debug_Line::Swap(Debug_Line* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Debug_Line::InternalSwap(Debug_Line* other) {
  std::swap(x1_, other->x1_);
  std::swap(y1_, other->y1_);
  std::swap(x2_, other->x2_);
  std::swap(y2_, other->y2_);
  std::swap(color_, other->color_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Debug_Line::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  return file_level_metadata[2];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Debug_Line

// required int32 x1 = 1;
bool Debug_Line::has_x1() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void Debug_Line::set_has_x1() {
  _has_bits_[0] |= 0x00000001u;
}
void Debug_Line::clear_has_x1() {
  _has_bits_[0] &= ~0x00000001u;
}
void Debug_Line::clear_x1() {
  x1_ = 0;
  clear_has_x1();
}
::google::protobuf::int32 Debug_Line::x1() const {
  // @@protoc_insertion_point(field_get:Debug_Line.x1)
  return x1_;
}
void Debug_Line::set_x1(::google::protobuf::int32 value) {
  set_has_x1();
  x1_ = value;
  // @@protoc_insertion_point(field_set:Debug_Line.x1)
}

// required int32 y1 = 2;
bool Debug_Line::has_y1() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void Debug_Line::set_has_y1() {
  _has_bits_[0] |= 0x00000002u;
}
void Debug_Line::clear_has_y1() {
  _has_bits_[0] &= ~0x00000002u;
}
void Debug_Line::clear_y1() {
  y1_ = 0;
  clear_has_y1();
}
::google::protobuf::int32 Debug_Line::y1() const {
  // @@protoc_insertion_point(field_get:Debug_Line.y1)
  return y1_;
}
void Debug_Line::set_y1(::google::protobuf::int32 value) {
  set_has_y1();
  y1_ = value;
  // @@protoc_insertion_point(field_set:Debug_Line.y1)
}

// required int32 x2 = 3;
bool Debug_Line::has_x2() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void Debug_Line::set_has_x2() {
  _has_bits_[0] |= 0x00000004u;
}
void Debug_Line::clear_has_x2() {
  _has_bits_[0] &= ~0x00000004u;
}
void Debug_Line::clear_x2() {
  x2_ = 0;
  clear_has_x2();
}
::google::protobuf::int32 Debug_Line::x2() const {
  // @@protoc_insertion_point(field_get:Debug_Line.x2)
  return x2_;
}
void Debug_Line::set_x2(::google::protobuf::int32 value) {
  set_has_x2();
  x2_ = value;
  // @@protoc_insertion_point(field_set:Debug_Line.x2)
}

// required int32 y2 = 4;
bool Debug_Line::has_y2() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void Debug_Line::set_has_y2() {
  _has_bits_[0] |= 0x00000008u;
}
void Debug_Line::clear_has_y2() {
  _has_bits_[0] &= ~0x00000008u;
}
void Debug_Line::clear_y2() {
  y2_ = 0;
  clear_has_y2();
}
::google::protobuf::int32 Debug_Line::y2() const {
  // @@protoc_insertion_point(field_get:Debug_Line.y2)
  return y2_;
}
void Debug_Line::set_y2(::google::protobuf::int32 value) {
  set_has_y2();
  y2_ = value;
  // @@protoc_insertion_point(field_set:Debug_Line.y2)
}

// required float color = 5;
bool Debug_Line::has_color() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void Debug_Line::set_has_color() {
  _has_bits_[0] |= 0x00000010u;
}
void Debug_Line::clear_has_color() {
  _has_bits_[0] &= ~0x00000010u;
}
void Debug_Line::clear_color() {
  color_ = 0;
  clear_has_color();
}
float Debug_Line::color() const {
  // @@protoc_insertion_point(field_get:Debug_Line.color)
  return color_;
}
void Debug_Line::set_color(float value) {
  set_has_color();
  color_ = value;
  // @@protoc_insertion_point(field_set:Debug_Line.color)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Debug_AdjustBot::kIdFieldNumber;
const int Debug_AdjustBot::kXFieldNumber;
const int Debug_AdjustBot::kYFieldNumber;
const int Debug_AdjustBot::kDirFieldNumber;
const int Debug_AdjustBot::kVxFieldNumber;
const int Debug_AdjustBot::kVyFieldNumber;
const int Debug_AdjustBot::kVzFieldNumber;
const int Debug_AdjustBot::kTeamFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Debug_AdjustBot::Debug_AdjustBot()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_InitDefaults_sslDebug_5fData_2eproto();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:Debug_AdjustBot)
}
Debug_AdjustBot::Debug_AdjustBot(const Debug_AdjustBot& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&id_, &from.id_,
    reinterpret_cast<char*>(&team_) -
    reinterpret_cast<char*>(&id_) + sizeof(team_));
  // @@protoc_insertion_point(copy_constructor:Debug_AdjustBot)
}

void Debug_AdjustBot::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&id_, 0, reinterpret_cast<char*>(&team_) -
    reinterpret_cast<char*>(&id_) + sizeof(team_));
}

Debug_AdjustBot::~Debug_AdjustBot() {
  // @@protoc_insertion_point(destructor:Debug_AdjustBot)
  SharedDtor();
}

void Debug_AdjustBot::SharedDtor() {
}

void Debug_AdjustBot::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Debug_AdjustBot::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return file_level_metadata[3].descriptor;
}

const Debug_AdjustBot& Debug_AdjustBot::default_instance() {
  protobuf_InitDefaults_sslDebug_5fData_2eproto();
  return *internal_default_instance();
}

Debug_AdjustBot* Debug_AdjustBot::New(::google::protobuf::Arena* arena) const {
  Debug_AdjustBot* n = new Debug_AdjustBot;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Debug_AdjustBot::Clear() {
// @@protoc_insertion_point(message_clear_start:Debug_AdjustBot)
  if (_has_bits_[0 / 32] & 255u) {
    ::memset(&id_, 0, reinterpret_cast<char*>(&team_) -
      reinterpret_cast<char*>(&id_) + sizeof(team_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool Debug_AdjustBot::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Debug_AdjustBot)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 id = 1;
      case 1: {
        if (tag == 8u) {
          set_has_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required int32 x = 2;
      case 2: {
        if (tag == 16u) {
          set_has_x();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &x_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required int32 y = 3;
      case 3: {
        if (tag == 24u) {
          set_has_y();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &y_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required float dir = 4;
      case 4: {
        if (tag == 37u) {
          set_has_dir();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &dir_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required int32 vx = 5;
      case 5: {
        if (tag == 40u) {
          set_has_vx();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &vx_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required int32 vy = 6;
      case 6: {
        if (tag == 48u) {
          set_has_vy();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &vy_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required int32 vz = 7;
      case 7: {
        if (tag == 56u) {
          set_has_vz();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &vz_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required uint32 team = 8;
      case 8: {
        if (tag == 64u) {
          set_has_team();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &team_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Debug_AdjustBot)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Debug_AdjustBot)
  return false;
#undef DO_
}

void Debug_AdjustBot::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Debug_AdjustBot)
  // required uint32 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->id(), output);
  }

  // required int32 x = 2;
  if (has_x()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->x(), output);
  }

  // required int32 y = 3;
  if (has_y()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->y(), output);
  }

  // required float dir = 4;
  if (has_dir()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(4, this->dir(), output);
  }

  // required int32 vx = 5;
  if (has_vx()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->vx(), output);
  }

  // required int32 vy = 6;
  if (has_vy()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->vy(), output);
  }

  // required int32 vz = 7;
  if (has_vz()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->vz(), output);
  }

  // required uint32 team = 8;
  if (has_team()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(8, this->team(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Debug_AdjustBot)
}

::google::protobuf::uint8* Debug_AdjustBot::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:Debug_AdjustBot)
  // required uint32 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->id(), target);
  }

  // required int32 x = 2;
  if (has_x()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->x(), target);
  }

  // required int32 y = 3;
  if (has_y()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->y(), target);
  }

  // required float dir = 4;
  if (has_dir()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(4, this->dir(), target);
  }

  // required int32 vx = 5;
  if (has_vx()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->vx(), target);
  }

  // required int32 vy = 6;
  if (has_vy()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->vy(), target);
  }

  // required int32 vz = 7;
  if (has_vz()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->vz(), target);
  }

  // required uint32 team = 8;
  if (has_team()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(8, this->team(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Debug_AdjustBot)
  return target;
}

size_t Debug_AdjustBot::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:Debug_AdjustBot)
  size_t total_size = 0;

  if (has_id()) {
    // required uint32 id = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->id());
  }

  if (has_x()) {
    // required int32 x = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->x());
  }

  if (has_y()) {
    // required int32 y = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->y());
  }

  if (has_dir()) {
    // required float dir = 4;
    total_size += 1 + 4;
  }

  if (has_vx()) {
    // required int32 vx = 5;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->vx());
  }

  if (has_vy()) {
    // required int32 vy = 6;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->vy());
  }

  if (has_vz()) {
    // required int32 vz = 7;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->vz());
  }

  if (has_team()) {
    // required uint32 team = 8;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->team());
  }

  return total_size;
}
size_t Debug_AdjustBot::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Debug_AdjustBot)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (((_has_bits_[0] & 0x000000ff) ^ 0x000000ff) == 0) {  // All required fields are present.
    // required uint32 id = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->id());

    // required int32 x = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->x());

    // required int32 y = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->y());

    // required float dir = 4;
    total_size += 1 + 4;

    // required int32 vx = 5;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->vx());

    // required int32 vy = 6;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->vy());

    // required int32 vz = 7;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->vz());

    // required uint32 team = 8;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->team());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Debug_AdjustBot::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Debug_AdjustBot)
  GOOGLE_DCHECK_NE(&from, this);
  const Debug_AdjustBot* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Debug_AdjustBot>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Debug_AdjustBot)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Debug_AdjustBot)
    MergeFrom(*source);
  }
}

void Debug_AdjustBot::MergeFrom(const Debug_AdjustBot& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Debug_AdjustBot)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from._has_bits_[0 / 32] & 255u) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_x()) {
      set_x(from.x());
    }
    if (from.has_y()) {
      set_y(from.y());
    }
    if (from.has_dir()) {
      set_dir(from.dir());
    }
    if (from.has_vx()) {
      set_vx(from.vx());
    }
    if (from.has_vy()) {
      set_vy(from.vy());
    }
    if (from.has_vz()) {
      set_vz(from.vz());
    }
    if (from.has_team()) {
      set_team(from.team());
    }
  }
}

void Debug_AdjustBot::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Debug_AdjustBot)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Debug_AdjustBot::CopyFrom(const Debug_AdjustBot& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Debug_AdjustBot)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Debug_AdjustBot::IsInitialized() const {
  if ((_has_bits_[0] & 0x000000ff) != 0x000000ff) return false;
  return true;
}

void Debug_AdjustBot::Swap(Debug_AdjustBot* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Debug_AdjustBot::InternalSwap(Debug_AdjustBot* other) {
  std::swap(id_, other->id_);
  std::swap(x_, other->x_);
  std::swap(y_, other->y_);
  std::swap(dir_, other->dir_);
  std::swap(vx_, other->vx_);
  std::swap(vy_, other->vy_);
  std::swap(vz_, other->vz_);
  std::swap(team_, other->team_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Debug_AdjustBot::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  return file_level_metadata[3];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Debug_AdjustBot

// required uint32 id = 1;
bool Debug_AdjustBot::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void Debug_AdjustBot::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
void Debug_AdjustBot::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
void Debug_AdjustBot::clear_id() {
  id_ = 0u;
  clear_has_id();
}
::google::protobuf::uint32 Debug_AdjustBot::id() const {
  // @@protoc_insertion_point(field_get:Debug_AdjustBot.id)
  return id_;
}
void Debug_AdjustBot::set_id(::google::protobuf::uint32 value) {
  set_has_id();
  id_ = value;
  // @@protoc_insertion_point(field_set:Debug_AdjustBot.id)
}

// required int32 x = 2;
bool Debug_AdjustBot::has_x() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void Debug_AdjustBot::set_has_x() {
  _has_bits_[0] |= 0x00000002u;
}
void Debug_AdjustBot::clear_has_x() {
  _has_bits_[0] &= ~0x00000002u;
}
void Debug_AdjustBot::clear_x() {
  x_ = 0;
  clear_has_x();
}
::google::protobuf::int32 Debug_AdjustBot::x() const {
  // @@protoc_insertion_point(field_get:Debug_AdjustBot.x)
  return x_;
}
void Debug_AdjustBot::set_x(::google::protobuf::int32 value) {
  set_has_x();
  x_ = value;
  // @@protoc_insertion_point(field_set:Debug_AdjustBot.x)
}

// required int32 y = 3;
bool Debug_AdjustBot::has_y() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void Debug_AdjustBot::set_has_y() {
  _has_bits_[0] |= 0x00000004u;
}
void Debug_AdjustBot::clear_has_y() {
  _has_bits_[0] &= ~0x00000004u;
}
void Debug_AdjustBot::clear_y() {
  y_ = 0;
  clear_has_y();
}
::google::protobuf::int32 Debug_AdjustBot::y() const {
  // @@protoc_insertion_point(field_get:Debug_AdjustBot.y)
  return y_;
}
void Debug_AdjustBot::set_y(::google::protobuf::int32 value) {
  set_has_y();
  y_ = value;
  // @@protoc_insertion_point(field_set:Debug_AdjustBot.y)
}

// required float dir = 4;
bool Debug_AdjustBot::has_dir() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void Debug_AdjustBot::set_has_dir() {
  _has_bits_[0] |= 0x00000008u;
}
void Debug_AdjustBot::clear_has_dir() {
  _has_bits_[0] &= ~0x00000008u;
}
void Debug_AdjustBot::clear_dir() {
  dir_ = 0;
  clear_has_dir();
}
float Debug_AdjustBot::dir() const {
  // @@protoc_insertion_point(field_get:Debug_AdjustBot.dir)
  return dir_;
}
void Debug_AdjustBot::set_dir(float value) {
  set_has_dir();
  dir_ = value;
  // @@protoc_insertion_point(field_set:Debug_AdjustBot.dir)
}

// required int32 vx = 5;
bool Debug_AdjustBot::has_vx() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void Debug_AdjustBot::set_has_vx() {
  _has_bits_[0] |= 0x00000010u;
}
void Debug_AdjustBot::clear_has_vx() {
  _has_bits_[0] &= ~0x00000010u;
}
void Debug_AdjustBot::clear_vx() {
  vx_ = 0;
  clear_has_vx();
}
::google::protobuf::int32 Debug_AdjustBot::vx() const {
  // @@protoc_insertion_point(field_get:Debug_AdjustBot.vx)
  return vx_;
}
void Debug_AdjustBot::set_vx(::google::protobuf::int32 value) {
  set_has_vx();
  vx_ = value;
  // @@protoc_insertion_point(field_set:Debug_AdjustBot.vx)
}

// required int32 vy = 6;
bool Debug_AdjustBot::has_vy() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
void Debug_AdjustBot::set_has_vy() {
  _has_bits_[0] |= 0x00000020u;
}
void Debug_AdjustBot::clear_has_vy() {
  _has_bits_[0] &= ~0x00000020u;
}
void Debug_AdjustBot::clear_vy() {
  vy_ = 0;
  clear_has_vy();
}
::google::protobuf::int32 Debug_AdjustBot::vy() const {
  // @@protoc_insertion_point(field_get:Debug_AdjustBot.vy)
  return vy_;
}
void Debug_AdjustBot::set_vy(::google::protobuf::int32 value) {
  set_has_vy();
  vy_ = value;
  // @@protoc_insertion_point(field_set:Debug_AdjustBot.vy)
}

// required int32 vz = 7;
bool Debug_AdjustBot::has_vz() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
void Debug_AdjustBot::set_has_vz() {
  _has_bits_[0] |= 0x00000040u;
}
void Debug_AdjustBot::clear_has_vz() {
  _has_bits_[0] &= ~0x00000040u;
}
void Debug_AdjustBot::clear_vz() {
  vz_ = 0;
  clear_has_vz();
}
::google::protobuf::int32 Debug_AdjustBot::vz() const {
  // @@protoc_insertion_point(field_get:Debug_AdjustBot.vz)
  return vz_;
}
void Debug_AdjustBot::set_vz(::google::protobuf::int32 value) {
  set_has_vz();
  vz_ = value;
  // @@protoc_insertion_point(field_set:Debug_AdjustBot.vz)
}

// required uint32 team = 8;
bool Debug_AdjustBot::has_team() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
void Debug_AdjustBot::set_has_team() {
  _has_bits_[0] |= 0x00000080u;
}
void Debug_AdjustBot::clear_has_team() {
  _has_bits_[0] &= ~0x00000080u;
}
void Debug_AdjustBot::clear_team() {
  team_ = 0u;
  clear_has_team();
}
::google::protobuf::uint32 Debug_AdjustBot::team() const {
  // @@protoc_insertion_point(field_get:Debug_AdjustBot.team)
  return team_;
}
void Debug_AdjustBot::set_team(::google::protobuf::uint32 value) {
  set_has_team();
  team_ = value;
  // @@protoc_insertion_point(field_set:Debug_AdjustBot.team)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Debug_AdjustBall::kXFieldNumber;
const int Debug_AdjustBall::kYFieldNumber;
const int Debug_AdjustBall::kVxFieldNumber;
const int Debug_AdjustBall::kVyFieldNumber;
const int Debug_AdjustBall::kVzFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Debug_AdjustBall::Debug_AdjustBall()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_InitDefaults_sslDebug_5fData_2eproto();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:Debug_AdjustBall)
}
Debug_AdjustBall::Debug_AdjustBall(const Debug_AdjustBall& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&x_, &from.x_,
    reinterpret_cast<char*>(&vz_) -
    reinterpret_cast<char*>(&x_) + sizeof(vz_));
  // @@protoc_insertion_point(copy_constructor:Debug_AdjustBall)
}

void Debug_AdjustBall::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&x_, 0, reinterpret_cast<char*>(&vz_) -
    reinterpret_cast<char*>(&x_) + sizeof(vz_));
}

Debug_AdjustBall::~Debug_AdjustBall() {
  // @@protoc_insertion_point(destructor:Debug_AdjustBall)
  SharedDtor();
}

void Debug_AdjustBall::SharedDtor() {
}

void Debug_AdjustBall::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Debug_AdjustBall::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return file_level_metadata[4].descriptor;
}

const Debug_AdjustBall& Debug_AdjustBall::default_instance() {
  protobuf_InitDefaults_sslDebug_5fData_2eproto();
  return *internal_default_instance();
}

Debug_AdjustBall* Debug_AdjustBall::New(::google::protobuf::Arena* arena) const {
  Debug_AdjustBall* n = new Debug_AdjustBall;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Debug_AdjustBall::Clear() {
// @@protoc_insertion_point(message_clear_start:Debug_AdjustBall)
  if (_has_bits_[0 / 32] & 31u) {
    ::memset(&x_, 0, reinterpret_cast<char*>(&vz_) -
      reinterpret_cast<char*>(&x_) + sizeof(vz_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool Debug_AdjustBall::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Debug_AdjustBall)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 x = 1;
      case 1: {
        if (tag == 8u) {
          set_has_x();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &x_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required int32 y = 2;
      case 2: {
        if (tag == 16u) {
          set_has_y();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &y_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required int32 vx = 3;
      case 3: {
        if (tag == 24u) {
          set_has_vx();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &vx_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required int32 vy = 4;
      case 4: {
        if (tag == 32u) {
          set_has_vy();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &vy_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required uint32 vz = 5;
      case 5: {
        if (tag == 40u) {
          set_has_vz();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &vz_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Debug_AdjustBall)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Debug_AdjustBall)
  return false;
#undef DO_
}

void Debug_AdjustBall::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Debug_AdjustBall)
  // required int32 x = 1;
  if (has_x()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->x(), output);
  }

  // required int32 y = 2;
  if (has_y()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->y(), output);
  }

  // required int32 vx = 3;
  if (has_vx()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->vx(), output);
  }

  // required int32 vy = 4;
  if (has_vy()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->vy(), output);
  }

  // required uint32 vz = 5;
  if (has_vz()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->vz(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Debug_AdjustBall)
}

::google::protobuf::uint8* Debug_AdjustBall::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:Debug_AdjustBall)
  // required int32 x = 1;
  if (has_x()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->x(), target);
  }

  // required int32 y = 2;
  if (has_y()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->y(), target);
  }

  // required int32 vx = 3;
  if (has_vx()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->vx(), target);
  }

  // required int32 vy = 4;
  if (has_vy()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->vy(), target);
  }

  // required uint32 vz = 5;
  if (has_vz()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->vz(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Debug_AdjustBall)
  return target;
}

size_t Debug_AdjustBall::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:Debug_AdjustBall)
  size_t total_size = 0;

  if (has_x()) {
    // required int32 x = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->x());
  }

  if (has_y()) {
    // required int32 y = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->y());
  }

  if (has_vx()) {
    // required int32 vx = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->vx());
  }

  if (has_vy()) {
    // required int32 vy = 4;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->vy());
  }

  if (has_vz()) {
    // required uint32 vz = 5;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->vz());
  }

  return total_size;
}
size_t Debug_AdjustBall::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Debug_AdjustBall)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (((_has_bits_[0] & 0x0000001f) ^ 0x0000001f) == 0) {  // All required fields are present.
    // required int32 x = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->x());

    // required int32 y = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->y());

    // required int32 vx = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->vx());

    // required int32 vy = 4;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->vy());

    // required uint32 vz = 5;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->vz());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Debug_AdjustBall::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Debug_AdjustBall)
  GOOGLE_DCHECK_NE(&from, this);
  const Debug_AdjustBall* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Debug_AdjustBall>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Debug_AdjustBall)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Debug_AdjustBall)
    MergeFrom(*source);
  }
}

void Debug_AdjustBall::MergeFrom(const Debug_AdjustBall& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Debug_AdjustBall)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from._has_bits_[0 / 32] & 31u) {
    if (from.has_x()) {
      set_x(from.x());
    }
    if (from.has_y()) {
      set_y(from.y());
    }
    if (from.has_vx()) {
      set_vx(from.vx());
    }
    if (from.has_vy()) {
      set_vy(from.vy());
    }
    if (from.has_vz()) {
      set_vz(from.vz());
    }
  }
}

void Debug_AdjustBall::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Debug_AdjustBall)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Debug_AdjustBall::CopyFrom(const Debug_AdjustBall& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Debug_AdjustBall)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Debug_AdjustBall::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000001f) != 0x0000001f) return false;
  return true;
}

void Debug_AdjustBall::Swap(Debug_AdjustBall* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Debug_AdjustBall::InternalSwap(Debug_AdjustBall* other) {
  std::swap(x_, other->x_);
  std::swap(y_, other->y_);
  std::swap(vx_, other->vx_);
  std::swap(vy_, other->vy_);
  std::swap(vz_, other->vz_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Debug_AdjustBall::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  return file_level_metadata[4];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Debug_AdjustBall

// required int32 x = 1;
bool Debug_AdjustBall::has_x() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void Debug_AdjustBall::set_has_x() {
  _has_bits_[0] |= 0x00000001u;
}
void Debug_AdjustBall::clear_has_x() {
  _has_bits_[0] &= ~0x00000001u;
}
void Debug_AdjustBall::clear_x() {
  x_ = 0;
  clear_has_x();
}
::google::protobuf::int32 Debug_AdjustBall::x() const {
  // @@protoc_insertion_point(field_get:Debug_AdjustBall.x)
  return x_;
}
void Debug_AdjustBall::set_x(::google::protobuf::int32 value) {
  set_has_x();
  x_ = value;
  // @@protoc_insertion_point(field_set:Debug_AdjustBall.x)
}

// required int32 y = 2;
bool Debug_AdjustBall::has_y() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void Debug_AdjustBall::set_has_y() {
  _has_bits_[0] |= 0x00000002u;
}
void Debug_AdjustBall::clear_has_y() {
  _has_bits_[0] &= ~0x00000002u;
}
void Debug_AdjustBall::clear_y() {
  y_ = 0;
  clear_has_y();
}
::google::protobuf::int32 Debug_AdjustBall::y() const {
  // @@protoc_insertion_point(field_get:Debug_AdjustBall.y)
  return y_;
}
void Debug_AdjustBall::set_y(::google::protobuf::int32 value) {
  set_has_y();
  y_ = value;
  // @@protoc_insertion_point(field_set:Debug_AdjustBall.y)
}

// required int32 vx = 3;
bool Debug_AdjustBall::has_vx() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void Debug_AdjustBall::set_has_vx() {
  _has_bits_[0] |= 0x00000004u;
}
void Debug_AdjustBall::clear_has_vx() {
  _has_bits_[0] &= ~0x00000004u;
}
void Debug_AdjustBall::clear_vx() {
  vx_ = 0;
  clear_has_vx();
}
::google::protobuf::int32 Debug_AdjustBall::vx() const {
  // @@protoc_insertion_point(field_get:Debug_AdjustBall.vx)
  return vx_;
}
void Debug_AdjustBall::set_vx(::google::protobuf::int32 value) {
  set_has_vx();
  vx_ = value;
  // @@protoc_insertion_point(field_set:Debug_AdjustBall.vx)
}

// required int32 vy = 4;
bool Debug_AdjustBall::has_vy() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void Debug_AdjustBall::set_has_vy() {
  _has_bits_[0] |= 0x00000008u;
}
void Debug_AdjustBall::clear_has_vy() {
  _has_bits_[0] &= ~0x00000008u;
}
void Debug_AdjustBall::clear_vy() {
  vy_ = 0;
  clear_has_vy();
}
::google::protobuf::int32 Debug_AdjustBall::vy() const {
  // @@protoc_insertion_point(field_get:Debug_AdjustBall.vy)
  return vy_;
}
void Debug_AdjustBall::set_vy(::google::protobuf::int32 value) {
  set_has_vy();
  vy_ = value;
  // @@protoc_insertion_point(field_set:Debug_AdjustBall.vy)
}

// required uint32 vz = 5;
bool Debug_AdjustBall::has_vz() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void Debug_AdjustBall::set_has_vz() {
  _has_bits_[0] |= 0x00000010u;
}
void Debug_AdjustBall::clear_has_vz() {
  _has_bits_[0] &= ~0x00000010u;
}
void Debug_AdjustBall::clear_vz() {
  vz_ = 0u;
  clear_has_vz();
}
::google::protobuf::uint32 Debug_AdjustBall::vz() const {
  // @@protoc_insertion_point(field_get:Debug_AdjustBall.vz)
  return vz_;
}
void Debug_AdjustBall::set_vz(::google::protobuf::uint32 value) {
  set_has_vz();
  vz_ = value;
  // @@protoc_insertion_point(field_set:Debug_AdjustBall.vz)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

// @@protoc_insertion_point(global_scope)
